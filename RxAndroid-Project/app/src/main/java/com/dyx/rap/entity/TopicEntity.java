package com.dyx.rap.entity;

import java.util.List;

/**
 * Author    : Yongxinda(yongxinda89@gmail.com)
 * Version   : 1.0
 * Date      : 2016-04-26
 * Time      : 16:56
 * Summary   :
 * Copyright : Copyright (c) 2016
 */
public class TopicEntity {

    /**
     * success : true
     * data : [{"id":"570907402a1f230a25be8aab","author_id":"504c28a2e2b845157708cb61","tab":"share","content":"<div class=\"markdown-text\"><p>首先还是感谢腾讯云提供的高大上多功能厅<\/p>\n<p><a href=\"http://www.qcloud.com/\"><img src=\"https://dn-cnode.qbox.me/FsvQEUQ9vjOy_6NohcGGt3GfTC8v\" alt><\/a><\/p>\n<p>今天现场来了蛮多人的，场地都差不多坐满了。估算了一下，应该有120人这样吧。<\/p>\n<p>现场有妹子。。。不知道是怎么乱入的。。。<\/p>\n<h2>现场图：<\/h2>\n<p><img src=\"//dn-cnode.qbox.me/FpuW7efPArrOentVnHorEtJYcK78\" alt=\"1.pic.jpg\">\n<img src=\"//dn-cnode.qbox.me/Fpv-sdGbUzLeaRhfU5P06kxzDW6B\" alt=\"2.pic.jpg\">\n<img src=\"//dn-cnode.qbox.me/FsVJpwBTqkYXay25g7xAcceldMK6\" alt=\"3.pic.jpg\">\n<img src=\"//dn-cnode.qbox.me/FrkAKC11Gk5Zd0_Rgg9xrMkWFKJo\" alt=\"4.pic.jpg\">\n<img src=\"//dn-cnode.qbox.me/FqyIFHWfdBYCxD27yQUe3jjY5n4y\" alt=\"5.pic.jpg\">\n<img src=\"//dn-cnode.qbox.me/FhtEgFhLGS7kRueqNKsZq4L7Vecw\" alt=\"6.pic.jpg\">\n<img src=\"//dn-cnode.qbox.me/FotdGLBLB4O1GQ0mQ5SA5yG9I3ID\" alt=\"7.pic.jpg\">\n<img src=\"//dn-cnode.qbox.me/FvIjqdflJ3QLKoDUzZJzdEA0MKKu\" alt=\"9.pic.jpg\">\n<img src=\"//dn-cnode.qbox.me/Foqtg6-iUxFF7GzL2sdEYLSxXLvQ\" alt=\"8.pic.jpg\"><\/p>\n<h2>PPT：<\/h2>\n<p>3份文件形式的：《实战ES2015 - 腾讯NodeParty》 《Nodejs平台化实践-NodeParty》 《TypeScript 在 Node 中的应用》 <a href=\"http://pan.baidu.com/s/1dEREt3N\">http://pan.baidu.com/s/1dEREt3N<\/a>\n一个 web 形式的：《Node.js 在广发证券》 <a href=\"http://gaohailang.github.io/node-party-gf-security-practice/#/\">http://gaohailang.github.io/node-party-gf-security-practice/#/<\/a><\/p>\n<\/div>","title":"【深圳】NodeParty 2016.04.09 总结","last_reply_at":"2016-04-26T02:11:46.078Z","good":false,"top":true,"reply_count":40,"visit_count":4218,"create_at":"2016-04-09T13:44:32.276Z","author":{"loginname":"alsotang","avatar_url":"https://avatars.githubusercontent.com/u/1147375?v=3&s=120"}},{"id":"5711f1816a2d2bda52de962a","author_id":"4efc278525fa69ac6900000f","tab":"share","content":"<div class=\"markdown-text\"><p>参考 <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-14-04\">https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-14-04<\/a> 文章，找 <a href=\"/user/alsotang\">@alsotang<\/a> 要了服务器登录信息，花了不到10分钟就将社区的 ssl 证书全部切换到 Let\u2019s encrypt 模式，而且还会永久自动续签。<\/p>\n<p>从此不再担心证书过期和费用了。<\/p>\n<p><img src=\"//dn-cnode.qbox.me/Ft3FUHL3A46ECfgxRPx1IKqsaRXy\" alt=\"untitled1.png\"><\/p>\n<\/div>","title":"cnode 社区也切换到 Let's encrypt 了","last_reply_at":"2016-04-25T10:24:12.590Z","good":false,"top":true,"reply_count":37,"visit_count":3427,"create_at":"2016-04-16T08:02:09.478Z","author":{"loginname":"fengmk2","avatar_url":"https://avatars.githubusercontent.com/u/156269?v=3&s=120"}},{"id":"5696e43e6272216e51bff67e","author_id":"54009f5ccd66f2eb37190485","tab":"share","content":"<div class=\"markdown-text\"><h1>国内Nodejs 2015总结<\/h1>\n<h1>Nodejs中文书籍<\/h1>\n<p>-<a href=\"http://nodejs.ucdok.com/\"> Node.js实战（第2季） 2015-10-01 吴中骅 雷宗民 赵坤 刘亚中 <\/a><\/p>\n<h1>Nodejs国内开源项目<\/h1>\n<ul>\n<li><a href=\"https://cnodejs.org/topic/55e5102e36d8c74b211853bb\">Austack 认证即服务<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/5538cd8491bdb6e41239d3e3\">ioredis - 一个支持 Cluster 和 Sentinel 的 Redis 库<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/5571ab06c4e7fbea6e9a2e9e\">Mabolo: 轻量级的 MongoDB ORM<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/54f93e9ec0330b8b3e0106ab\">一个自用的极简 ORM，带三方缓存支持\u2014\u2014Toshihiko<\/a><\/li>\n<li><a href=\"https://github.com/rain1017/quick-pomelo\">A Much Better Pomelo Game Server Framework (网易Pomelo框架深度优化版) <\/a><\/li>\n<\/ul>\n<h1>Nodejs Web框架<\/h1>\n<ul>\n<li><a href=\"http://github.com/75team/thinkjs\">Thinkjs第一个全面支持使用 ES6/7 特性开发的 Node.js 框架<\/a><\/li>\n<li><a href=\"https://github.com/Houfeng/nokit\">Nokit最初从 asp.net 借鉴不少思想<\/a> 2015年7月19日 发布的第一个公开的 release 版本<\/li>\n<li><a href=\"https://github.com/palomajs/paloma\">Paloma\u2014\u2014一个类 Angular 的 Node.js MVC框架<\/a><\/li>\n<li><a href=\"https://github.com/moajs\">Moajs: full stack framework based expressjs、mongoose、bluebird、mocha<\/a><\/li>\n<li><a href>Trekjs: Next generation full-stack JavaScript open source solution, based on Koa.<\/a><\/li>\n<li><a href=\"https://github.com/toajs/toa\">Toa:  A pithy and powerful web framework.<\/a><\/li>\n<\/ul>\n<h1>Node Party国内线下聚会<\/h1>\n<h2>2015年5月<\/h2>\n<ul>\n<li>［ 北京］<a href=\"https://cnodejs.org/topic/556e7754bf871b3962efb8ef\">5月31日 NodeJS Party<\/a><\/li>\n<\/ul>\n<h2>2015年7月<\/h2>\n<ul>\n<li>2015-07-11 09:00 ~ 2015-07-12 19:00，深JS\u2014\u20142015 JS中国开发者大会<\/li>\n<li>［ 北京］<a href=\"https://cnodejs.org/topic/5593b13b6ba28efa30a603cd\">7月5日 NodeJS Party<\/a>\n<ul>\n<li>Meteor 开发从0到1 刘吉洋<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h2>2015年8月<\/h2>\n<ul>\n<li>［北京］<a href=\"https://cnodejs.org/topic/55c1ce495965fe2c74f477c5\">8月9日 NodeJS Party<\/a><\/li>\n<\/ul>\n<h2>2015年9月<\/h2>\n<ul>\n<li>［ 北京］9月13日 NodeJS Party<\/li>\n<li>9月19号 <a href=\"https://cnodejs.org/topic/55751355c4e7fbea6e9a3055\">珠三角 Node Party<\/a>\n<ul>\n<li>Node技术栈在混合应用中的实践  【CashLee】<\/li>\n<li>Node多项目配置文件管理-经验之作【老雷】<\/li>\n<li>一个JS程序员的全栈心路历程 【路飞】<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h2>2015年10月<\/h2>\n<ul>\n<li>10月17日 BJ NodeJS Party 分享<\/li>\n<\/ul>\n<h2>2015年11月<\/h2>\n<ul>\n<li>11月14日 BJ NodeParty 分享<\/li>\n<li>11月14号 <a href=\"https://cnodejs.org/topic/55751355c4e7fbea6e9a3055\">珠三角 Node Party<\/a>\n<ul>\n<li>做个雷大厨，如何从头开发一个微信公众号 【老雷】<\/li>\n<li>Meteor + React，快速全栈开发 Web App【荆雷】<\/li>\n<li>键盘极客猎奇分享-工具分享【黑山】<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h2>2015年12月<\/h2>\n<ul>\n<li>2015年12月13日 北京NodeParty@零壹时光<\/li>\n<\/ul>\n<h1>文档汇总<\/h1>\n<p><a href=\"http://git.oschina.net/ubiware/node-party/\">http://git.oschina.net/ubiware/node-party/<\/a><\/p>\n<ul>\n<li><a href=\"https://cnodejs.org/topic/55efee1e4b6a9b371ef8177b\">9月13日 NodeJS Party<\/a>\n<ul>\n<li>A Web Developer\u2019s Learning from App Development - Steve<\/li>\n<li>Open Austack - 一个MEAN架构下的开源项目介绍，包括背景、设计、开发过程，Austack是SaaS服务，Identity as a Service.<\/li>\n<li>Node.js Based IM - by Mofei<\/li>\n<\/ul>\n<\/li>\n<li><a href=\"https://cnodejs.org/topic/562987ede6a3804c5815916d\">10月17日 BJ NodeJS Party 分享<\/a>\n<ul>\n<li>Introduce TypeScript<\/li>\n<li>创业企业中使用Docker<\/li>\n<\/ul>\n<\/li>\n<li><a href=\"https://cnodejs.org/topic/5652ce23e0f7c7a96d97338c\">北京11月14日 BJ NodeParty 分享<\/a>\n<ul>\n<li>WebComponents and Polymer<\/li>\n<li>Autodesk - View and data API<\/li>\n<li><a href=\"http://wangxinhan.com/2015/11/15/11.14BJNodeParty/\">http://wangxinhan.com/2015/11/15/11.14BJNodeParty/<\/a><\/li>\n<\/ul>\n<\/li>\n<li><a href=\"https://cnodejs.org/topic/5678f68011487b1e4bae0514\">北京12月13日 NodeParty@零壹时光 照片，演讲PPT<\/a>\n<ul>\n<li>倪楷分享了在baidu地图，百度慧眼中，渲染大量点，线，面的情况下，使用node-canvas的经验。对比了数据渲染的前端处理或者后端处理的使用场景。<\/li>\n<li>黄偲（cai），无安利的讲了在智课教育线上系统中，实践React, Redux 的经验。黄偲分享的干货让很多人兴奋。<\/li>\n<li>做六人行和91拼团的周磊，作为创业者，他与大家分享了许多设计产品的观点和GrowthHacker理念，激发了大家的热烈讨论！<\/li>\n<\/ul>\n<\/li>\n<li><a href=\"https://cnodejs.org/topic/5694c72cc2289f51658f096b\">让我们谈谈「生产环境中的 Node.js」- Node 地下铁第 1 次线下沙龙总结<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/566f6f48b4844e992a12686a\">首届官方Node.js大会 slides 和视频<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/55a25700419f1e8a23a64372\">【深js】ppt分享<\/a>\n<ul>\n<li>朴灵《Node Profiler》 <a href=\"https://github.com/JacksonTian/shenjs\">https://github.com/JacksonTian/shenjs<\/a>\n<ul>\n<li>另见 <a href=\"http://alinode.aliyun.com/\">http://alinode.aliyun.com/<\/a><\/li>\n<\/ul>\n<\/li>\n<li>老雷《微服务架构下的服务通讯》<a href=\"http://t.cn/RLbrot6\">http://t.cn/RLbrot6<\/a><\/li>\n<li>Database Everywhere: A Reative Data Architecture for JavaScript - Evan You: <a href=\"http://www.slides.com/evanyou/shenjs\">http://www.slides.com/evanyou/shenjs<\/a><\/li>\n<li>Unlimited Power - ES6 Generators - Brian Holt: <a href=\"https://speakerdeck.com/btholt/unlimited-power-es6-generators\">https://speakerdeck.com/btholt/unlimited-power-es6-generators<\/a><\/li>\n<li>koa 和 toa 的框架原理及开发实践 - 严清：<a href=\"http://www.zensh.org/slides/2015toakoa/index.html\">http://www.zensh.org/slides/2015toakoa/index.html<\/a><\/li>\n<li>JavaScript The World\u2019s Best Programming Language - Hax: <a href=\"http://johnhax.net/2015/js-the-best/#0\">http://johnhax.net/2015/js-the-best/#0<\/a><\/li>\n<\/ul>\n<\/li>\n<li><a href=\"https://cnodejs.org/topic/55a9ca1b0b9ddb895675dfd6\">深圳全球架构师大会 ArchSummit PPT 收集分享<\/a><\/li>\n<\/ul>\n<h1>精华汇总<\/h1>\n<h2>nodejs 科普<\/h2>\n<ul>\n<li><a href=\"https://cnodejs.org/topic/555d3d54e684c4c8088a0d78\">来自朴灵大大的 \u2013 Node.js 简史<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/55651bf07d4c64752effb4b1\">精华 Node.js最新Web技术栈（2015年5月）<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/560dbc826a1ed28204a1e7de\">Node.js最新技术栈之Promise篇<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/5576a30bc4e7fbea6e9a32ad\">NodeJS 异常处理 uncaughtException 篇<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/56746866cd926feb0c0c8f12\">NodeJS服务监控报警系统的核心实现和开源共建<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/558a80b0c31358754d3aa343\">聊聊实时 Node 应用性能监测的实现<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/565715c7b1e04fda51bcdf53\">Node.js 启动方式：一道关于全局变量的题目引发的思考<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/5657ffd82972c1bd5178c5cd\">Node.js 启动方式：一道关于全局变量的题目引发的思考·续<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/56499568d28aa64101600fdc\">Node.js的Buffer那些你可能不知道的用法<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/564a1ae51ba2ef107f854cfc\">解析 node-murmurhash 库：说说 Node.js 二进制操作<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/5603cb8a152fdd025f0f5014\">简单实现Promise/A+. 对着文档 .含注释<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/563735ed677332084c319d95\">Node.js定制REPL的妙用<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/55c2ba865965fe2c74f478ac\"> nodejs里的repl<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/561ca8f95a4ffebe39e2fb18\">记一次用 NodeJs 实现模拟登录的思路<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/55f28b29b8a2e3a367529b9d\">timer的优化故事<\/a><\/li>\n<\/ul>\n<h2>架构<\/h2>\n<ul>\n<li><a href=\"https://cnodejs.org/topic/561e789e30e69d1b2ad8b27f\">消息系统设计与实现「上篇」<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/56485dd8b68278b07f982804\">消息系统设计与实现「下篇」<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/55a533617abefcbe22a81edc\">cookie session，jwt，弱一致性数据与重放攻击<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/55f6e69904556da7553d20dd\">单点登录的三种实现方式<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/5537092448636414313a7351\">Web开发Session相关<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/55210d88c4f5240812f55408\">Web 开发后端缓存思路<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/5533dd6e9138f09b629674fd\">浅谈cnode社区如何防止csrf攻击<\/a><\/li>\n<\/ul>\n<h2>nodejs 工具类<\/h2>\n<ul>\n<li><a href=\"https://cnodejs.org/topic/561f8c8f3f4d1fb610995bd8\"> Gulp实战和原理解析（以weui作为项目实例）<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/566f73b91d2912ce2a35aa1c\"> Lo-Dash 与 Underscore，Prototype 与 jQuery，两段恩怨情仇<\/a><\/li>\n<\/ul>\n<h2>翻译<\/h2>\n<ul>\n<li><a href=\"https://cnodejs.org/topic/55714dfac4e7fbea6e9a2e5d\">NodeJS 错误处理最佳实践<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/566ef3ef1d2912ce2a35aa13\">10 Habits of a Happy Node Hacker 2016<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/55617b144eb040084cfe5e13\">从coffeeScript迁移到ES6<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/55efcc524b70f72113ff4f3b\">请用 Node.js 4.0.0<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/557c165616839d2d539362a8\"> 设计优雅 UI 的 7 条准则（翻译精简版）<\/a><\/li>\n<\/ul>\n<h2>其他<\/h2>\n<ul>\n<li><a href=\"https://cnodejs.org/topic/5629c84ee6a3804c5815918d\"> Using Docker Compose in Node.js Project<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/55233cbfe78dd0ea3b4060b3\">向mongodb里插入10万条记录的代码怎么写？<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/55c97a997a5d91fa63fe9ce7\">Mongodb线上真实事故案例<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/559a0bf493cb46f578f0a601\">mongodb分页优化<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/555bf91ee684c4c8088a0c0f\">Mongodb索引实战<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/5590adbbebf9c92d17e734de\">mongodb运维之副本集实践<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/5660f8f9d0bc14ae27939b37\">玩转 React 服务器端渲染<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/566d50cc5af0e6ab3bf1a2ac\">chrome插件分享 gitlab-tree 更方便的浏览Gitlab上的代码<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/5639ce0a7320b237394c5a3d\">Meteor 的 reactive 特性<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/56261a249b48ca9448b776c4\">JavaScript柯里化<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/5631e6fe9599e16e2aec79fa\">JavaScript语言中的糟粕<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/561cb6bfdd986b5c39ff1c7e\">JavaScript类型检测<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/5599521293cb46f578f0a57e\">图解Javascript上下文与作用域<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/55accdeab4ab1d7d02bf0d8c\">图解Javascript原型链<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/55e70bcd2994cac32e89c815\"> 项目需要造了个轮子，轻量级双向数据绑定工具 modelite.js<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/55c895e37a5d91fa63fe9be3\">初探 MySQL 的 Binlog<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/555779847cabb7b45ee6bd04\"> 使用 coffee 来测试 cli 命令行工具<\/a><\/li>\n<\/ul>\n<h2>for feature<\/h2>\n<ul>\n<li><a href=\"https://cnodejs.org/topic/565c65c4b31692e827fdd00c\">ES2015 &amp; babel 实战：开发NPM模块<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/5640b80d3a6aa72c5e0030b6\">体验异步的终极解决方案-ES7的Async/Await<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/553fa3e62bd4939b1e9055a3\">co的实现（Promise化的4.X版）<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/55743f84c4e7fbea6e9a2fd4\">使用 BabelJS 编写 Nodejs Package<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/5565b4a77d4c64752effb5dd\">ES6语法实践，用ES6重写《JavaScript Patterns》中的设计模式<\/a><\/li>\n<\/ul>\n<h1>社区项目<\/h1>\n<h2>维护中的客户端<\/h2>\n<ul>\n<li>\n<p>from <a href=\"/user/ilanceli\">@ilanceli<\/a> 《CNode 官方客户端》 <a href=\"https://github.com/lanceli/cnodejs-ionic\">https://github.com/lanceli/cnodejs-ionic<\/a><\/p>\n<\/li>\n<li>\n<p>from <a href=\"/user/TakWolf\">@TakWolf<\/a> 《【CNode Material Design】 Android原生第三方客户端》<a href=\"https://github.com/TakWolf/CNode-Material-Design\">https://github.com/TakWolf/CNode-Material-Design<\/a><\/p>\n<\/li>\n<li>\n<p>from <a href=\"/user/soliury\">@soliury<\/a> 《React-Native 客户端【v1.0.0-alpha】【RN + Redux】【求issue】》 <a href=\"https://github.com/soliury/noder-react-native\">https://github.com/soliury/noder-react-native<\/a><\/p>\n<\/li>\n<li>\n<p>from <a href=\"/user/shinygang\">@shinygang<\/a> 《用Vue.js编写了cnodejs.org的h5客户端(webapp)》 <a href=\"https://github.com/shinygang/Vue-cnodejs\">https://github.com/shinygang/Vue-cnodejs<\/a><\/p>\n<\/li>\n<\/ul>\n<p>点评，技术上都是比较新的，ionic，rn，vue都不错<\/p>\n<h2>开源项目《一起学koa》<\/h2>\n<p>开源是最好的学习平台，大家一定要多多参与，我们也希望能够和大家一起，完成一本让大家更容易学习koa的书<\/p>\n<p>技术顾问<\/p>\n<ul>\n<li>\n<p><a href=\"/user/fundon\">@fundon<\/a> （蔡神）<\/p>\n<\/li>\n<li>\n<p><a href=\"/user/alsotang\">@alsotang<\/a>  （唐少）<\/p>\n<\/li>\n<li>\n<p><a href=\"/user/leizongmin\">@leizongmin<\/a>  （老雷）<\/p>\n<\/li>\n<li>\n<p><a href=\"https://cnodejs.org/topic/5668e0a55af0e6ab3bf1a1d8\">原文<\/a><\/p>\n<\/li>\n<li>\n<p>gitbook地址 <a href=\"http://base-n.github.io/koa-generator-examples/\">http://base-n.github.io/koa-generator-examples/<\/a><\/p>\n<\/li>\n<li>\n<p>预览地址见 <a href=\"http://base-n.github.io/koa-generator-examples/\">http://base-n.github.io/koa-generator-examples/<\/a><\/p>\n<\/li>\n<\/ul>\n<h1>年度最佳<\/h1>\n<h2>年度最佳调优工具alinode<\/h2>\n<p>alinode 是阿里云出品的 Node.js 应用服务解决方案，是一套基于社区 Node 改进的运行时环境和服务平台。在社区的基础上我们内建了强大的支持功能，帮助开发者迅速洞见性能细节，快速定位疑难杂症，直探问题根源。<\/p>\n<ul>\n<li>官网 <a href=\"http://alinode.aliyun.com/\">http://alinode.aliyun.com/<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/561f289b4928c5872abc18ee\">部署alinode<\/a><\/li>\n<\/ul>\n<h2>年度最佳编辑器Visual Studio Code<\/h2>\n<p>vsc一出现就非常火爆，虽然也有一些功能特性缺失，如代码折叠等，但开源后有非常不错的表现。另外vsc对nodejs代码调试做了非常多的优化，比node-inspector快很多<\/p>\n<ul>\n<li><a href=\"https://cnodejs.org/topic/56192cab41ceb58c4f8e6e67\">Visual Studio Code Guide升级版<\/a><\/li>\n<li><a href=\"https://cnodejs.org/topic/55f673920209f4f25879f418\">用Visual Studio Code写Node.js<\/a><\/li>\n<\/ul>\n<h2>年度最有前途框架 ThinkJS 2.0<\/h2>\n<p>2015 年 10 月 30 日，ThinkJS 发布全新 2.0 版本，使用 async/await 解决异步问题，借助 Babel 编译，可以直接使用 ES6/7 特性进行开发，是第一个全面支持使用 ES6/7 特性开发的 Node.js 框架。<\/p>\n<ul>\n<li>2015/11/21 - 360 训练营前端专场<\/li>\n<li>2015/11/27 - ThinkJS 走进美丽说<\/li>\n<li>2015/12/18 - ThinkJS 走进 D2<\/li>\n<li>2015/12/11 - ThinkJS 走进今日头条<\/li>\n<li>2015/12/07 - 加入 Node.js 微信群<\/li>\n<\/ul>\n<h2>年度最佳中文文档《io.js API 中文文档》<\/h2>\n<ul>\n<li><a href=\"https://cnodejs.org/topic/55928df39418ff516f650e6b\">https://cnodejs.org/topic/55928df39418ff516f650e6b<\/a><\/li>\n<li><a href=\"http://davidcai1993.gitbooks.io/nodejs-api-doc-in-chinese/content/index.html\">http://davidcai1993.gitbooks.io/nodejs-api-doc-in-chinese/content/index.html<\/a><\/li>\n<\/ul>\n<h2>年度最佳线下活动组织者：hain （王海良）<\/h2>\n<p>7场北京线下聚合<\/p>\n<p><a href=\"https://cnodejs.org/user/Samurais\">https://cnodejs.org/user/Samurais<\/a><\/p>\n<h2>年度最佳新人: DavidCai1993 （蔡伟）<\/h2>\n<ul>\n<li><a href=\"https://cnodejs.org/user/DavidCai1993\">https://cnodejs.org/user/DavidCai1993<\/a><\/li>\n<li><a href=\"https://github.com/DavidCai1993\">https://github.com/DavidCai1993<\/a><\/li>\n<\/ul>\n<p>理由<\/p>\n<ul>\n<li>翻译了iojs文档<\/li>\n<li>翻译了typescript文档<\/li>\n<li>ES6语法实践，用ES6重写《JavaScript Patterns》中的设计模式<\/li>\n<li>从coffeeScript迁移到ES6<\/li>\n<li>co的实现（Promise化的4.X版）<\/li>\n<li><a href=\"https://github.com/DavidCai1993/ts-koa\">Koa implementation in TypeScript<\/a><\/li>\n<\/ul>\n<p>目前蔡伟在teambition实习，是严清（zensh）的小弟，从上面的列表可以看出，技术很好，前卫，深度，也同时擅长文档翻译，未来看好，希望他可以像 <a href=\"/user/luin\">@luin<\/a> 一样，有成名主线项目<\/p>\n<h2>年度最佳普及 Node.js 的公司：阿里巴巴<\/h2>\n<p><a href=\"/user/alsotang\">@alsotang<\/a> 回复里提到的，这个确实算，双十一可谓是阿里让nodejs风头尽出<\/p>\n<p>参见<a href=\"https://www.zhihu.com/question/37379084/answer/71894611\">Node.js 在双十一中有哪些应用，表现如何？<\/a><\/p>\n<h1>写在最后<\/h1>\n<p>这是我个人整理的，如果有不合理的或者没提到到得，请帮忙补充<\/p>\n<\/div>","title":"国内Nodejs 2015汇总","last_reply_at":"2016-04-22T07:57:47.497Z","good":true,"top":true,"reply_count":107,"visit_count":37279,"create_at":"2016-01-13T23:56:46.312Z","author":{"loginname":"i5ting","avatar_url":"https://avatars.githubusercontent.com/u/3118295?v=3&s=120"}},{"id":"56b70c15c3f170d2629955b5","author_id":"54009f5ccd66f2eb37190485","tab":"share","content":"<div class=\"markdown-text\"><h1>展望Nodejs 2016和新年祝福<\/h1>\n<p>《素书》里讲\u201c推古验今，所以不惑\u201d，所以我们先回顾一下2015年nodejs的国内外发展，继而展望一下我的2016年关于nodejs的想法和新年祝福<\/p>\n<h2>回顾一下2015年<\/h2>\n<p><a href=\"http://i5ting.github.io/history-of-node-js/\">http://i5ting.github.io/history-of-node-js/<\/a><\/p>\n<h3>Q1(1季度)<\/h3>\n<ul>\n<li>IO.js 1.0.0 发布<\/li>\n<li>Joyent 推进建立 Node.js 基金会\n<ul>\n<li>Joyent, IBM, Microsoft, PayPal, Fidelity, SAP and The Linux Foundation Join Forces to Support Node.js Community With Neutral and Open Governance<\/li>\n<\/ul>\n<\/li>\n<li>IO.js 和 Node.js 和解提案<\/li>\n<\/ul>\n<h3>Q2(2季度)<\/h3>\n<ul>\n<li>npm 支持私有模块<\/li>\n<li>Node 项目领导人 TJ Fontaine 逐步解除核心身份并离开 Joyent 公司\n<ul>\n<li>A changing of the guard in Nodeland.<\/li>\n<\/ul>\n<\/li>\n<li>Node.js 和 io.js 在 Node 基金会下合并情况<\/li>\n<\/ul>\n<h3>Q3(3季度)<\/h3>\n<ul>\n<li>4.0 版本发布，即新的 1.0 版本<\/li>\n<\/ul>\n<h3>Q4(4季度)<\/h3>\n<ul>\n<li>Node v4.2.0，首个长期支持版本（LTS）<\/li>\n<li>Apigee，RisingStack 和 Yahoo 加入 Node.js 基金会<\/li>\n<li>Node Interactive\n<ul>\n<li>The first annual Node.js conference by the Node.js Foundation<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>总结<\/h3>\n<p>目前的2个版本<\/p>\n<ul>\n<li>v4.2.6 LTS（长期支持版本）<\/li>\n<li>v5.5.0 Stable（稳定版本）<\/li>\n<\/ul>\n<p><img src=\"https://github.com/nodejs/LTS/raw/master/schedule.png\" alt=\"schedule.png\"><\/p>\n<p>整体来说趋于稳定<\/p>\n<ul>\n<li>成立了nodejs基金会，能够让nodejs在未来有更好的开源社区支持<\/li>\n<li>发布了LTS版本，意味着api稳定<\/li>\n<li>快速发版本，很多人吐槽这个，其实换个角度看，这也是社区活跃的一个体现，但如果大家真的看CHANGELOG，其实都是小改进，而且是边边角角的改进，也就是说nodejs的core（核心）已经非常稳定了，可以大规模使用<\/li>\n<\/ul>\n<h2>awesome-nodejs<\/h2>\n<p><a href=\"https://github.com/sindresorhus/awesome-nodejs\">https://github.com/sindresorhus/awesome-nodejs<\/a><\/p>\n<p>我不太喜欢sindresorhus这货，不过10,110个Star也足矣说明nodejs的火爆<\/p>\n<p><img src=\"//dn-cnode.qbox.me/FknGoYj9mP6hAwZ5wWuBQst7u7oC\" alt=\"awesome-node.png\"><\/p>\n<h3>国内2015<\/h3>\n<p>看这篇文章吧，<a href=\"https://cnodejs.org/topic/5696e43e6272216e51bff67e\">国内Nodejs 2015汇总<\/a><\/p>\n<p>基本能总结的我都放上了。<\/p>\n<p>无论开源项目、web框架、线上线下聚会、精华文章、社区项目都有不错的成绩，客观的讲这篇文章并不够全面，限于我个人的知识面和精力，至少可以说明nodejs在国内的情况<\/p>\n<pre class=\"prettyprint\"><code>言必称nodejs还为时过早，但以不知道nodejs为耻还是做到了的\n<\/code><\/pre><p>另外一个事件就是微博的前端大撕逼事件，我不想评论是非，对我而言当一个技术，无数人都无法回避的时候，它就是成功的，<\/p>\n<h2>我的2015<\/h2>\n<p>2015年我跑去创业了，技术栈就是所谓的MEAN，摸爬滚打的1年里，遭遇了很多<\/p>\n<ul>\n<li>科普nodejs，带小弟<\/li>\n<li>写框架，总结最佳实践<\/li>\n<li>拆分、解耦，面向微服务<\/li>\n<\/ul>\n<p>对我而言，最难的2件事儿<\/p>\n<ul>\n<li>创业其实是一件挺痛苦的事儿，无薪水，所以有的时候要靠讲课维持生活，我又被迫去讲课<\/li>\n<li>招人，会nodejs的人并不多，大部分人了解js就不错了，另外我在天津，更难招人，好的都去北京了，这是一件非常痛苦的事儿，于是我做了【node全栈】公众号，通过科普去招人，目前看效果还不错的<\/li>\n<\/ul>\n<p>整体来说，还好，撑过来了，基于nodejs的技术栈是非常稳定的，只要在架构上屏蔽一些问题，就可以非常好的在实现和效率上取得平衡。<\/p>\n<p>其实有一个好的心态是最重要的。我在cnode上的签名就是\u201c少抱怨，多思考，未来更美好\u201d，抱怨不解决问题，还是多思考，多积累，多总结才是<\/p>\n<p>另外要有1颗坚定的心，切勿人云亦云，切勿带着情绪去看待问题。<\/p>\n<h2>我理想的2016年<\/h2>\n<p>很多人说我的文章写来写去就那些东西，我其实不想辩解啥，确实是科普的文章，但对我而言，是一个必须要走的过程，哈哈，在2016年我其实想做更多<\/p>\n<h3>布道：完成《一起学koa》一书<\/h3>\n<p>对于nodejs的未来，我是非常看好的，虽然我不是很喜欢es6和es7，但大势所趋.nodejs4就支持了10个es6的特性，所以es6也是需要学的<\/p>\n<p>nodejs异步带来的困扰也将破局，从callback到promise，从promise到generator，从generator到co，从co到async/await，无论如何generator/co和async/await会在2016年得到非常大的推广<\/p>\n<p>目前这些的支持除了nodejs sdk和babel外，typescript也是一个比较好的选择<\/p>\n<p>至于koa，目前分为1.x和2.x版本，1里已经很稳定了，和co配合也非常好。2里的es6特性整合还是有些问题，还没有最终发版，目前观望中<\/p>\n<p>所以我比较看好<a href=\"https://cnodejs.org/topic/56ad6edac3f170d262995494\">开源Nodejs微服务项目推荐：micro<\/a>这样的微框架，至少在学习koa之前，是比较简单、比较容易入门的项目，而且在微服务的大潮下，也是一个比较好的技术选型。<\/p>\n<p>综上所述，是2016年的我对nodejs趋势的一个看法，我希望把这些内容都写到《一起学koa》一书中。<\/p>\n<p>希望自己能够不打自己脸，能够按时完成，无论工作多忙或者其他原因。<\/p>\n<h3>技术咨询<\/h3>\n<p>我个人非常看好nodejs全栈和大前端的前景，在2015年我做了非常多的科普的事儿，在2016年我希望能够做一些技术咨询的工作<\/p>\n<p>在公共号和微信里有很多人咨询过各种问题，这是非常有前景的工作，而且存在大量需求，很多公司或个人技术选型的时候，常常会被各种意见所左右，需要有相对专业的人给出建议<\/p>\n<p><strong>我很喜欢nodejs，但我不会让nodejs做所有的事儿，从实践的角度看，2016年会是百花齐放的技术多样性局面，目前docker、微服务、以及跟着高性能语言、框架等，技术选型已经不是从前那个只看团队、性能的年代，我们应该更多的围绕如何快速发展和架构眼光去看待技术选型<\/strong><\/p>\n<p>目前已有人付费咨询<\/p>\n<ul>\n<li><a href=\"http://senecajs.org/\">http://senecajs.org/<\/a><\/li>\n<li><a href=\"https://github.com/Mashape/kong\">https://github.com/Mashape/kong<\/a><\/li>\n<\/ul>\n<p>等<\/p>\n<p>希望能够有机会给更多公司服务，欢迎联系我i5ting@126.com<\/p>\n<h3>完成《Nodejs微信开发》课程<\/h3>\n<p>我和StuQ合作一门课程，和微信开发有关，年前已经讲过1期了，反响还不错，2期会在年后讲，目前人都已经招满了，完成好一门课和写一本书基本是一样的，都需要非常多的时间和精力<\/p>\n<p>希望自己能够出一个不错的视频课程<\/p>\n<h3>cnodejs社区<\/h3>\n<p>我依然还会像2015年一样处理所有帖子，原则以内的好说，原则以外的还请谅解。<\/p>\n<p>另外就是cnodejs作为一个比较活跃的社区，其实有很多精华，这点在总结《国内Nodejs 2015汇总》时就深有体会。另外很多人在我的公众号【node全栈】里会回复问一些技术内容，我的想法是，把这些精华的帖子汇总一下，标签一下，以便更多人可以在公众号上访问，如果<a href=\"/user/alsotang\">@alsotang<\/a>不开公众号的话，我就会放到我的公众号【node全栈】里。<\/p>\n<h2>祝福<\/h2>\n<p>nodejs已经占到风口上了，希望大家能够把握机会，在2016年收获更多技术、财富<\/p>\n<p>最后祝大家新年快乐，万事如意，阖家欢乐<\/p>\n<p>全文完<\/p>\n<p>欢迎关注我的公众号【node全栈】<\/p>\n<p><img src=\"//dn-cnode.qbox.me/FtALxsauUkYDGdzcuA5y6BaIdUMC\" alt=\"node全栈.png\"><\/p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMTU0NTc4Nw==&amp;mid=410212313&amp;idx=1&amp;sn=961236e1ed448edcbb144ca19e0d28be#rd\">如果想参与评论，请点击原文链接，进入国内最专业的cnode论坛<\/a><\/p>\n<\/div>","title":"展望Nodejs 2016和新年祝福","last_reply_at":"2016-04-21T14:00:17.737Z","good":false,"top":true,"reply_count":37,"visit_count":13956,"create_at":"2016-02-07T09:19:17.268Z","author":{"loginname":"i5ting","avatar_url":"https://avatars.githubusercontent.com/u/3118295?v=3&s=120"}},{"id":"5672c03fcd926feb0c0c8ebc","author_id":"53dfe70cbd3cc3e50b5b565f","tab":"share","content":"<div class=\"markdown-text\"><h2>测试内容<\/h2>\n<p>动态HTTP服务器极限性能，分为两项：<\/p>\n<ul>\n<li>优化前后的各版本fibjs<\/li>\n<li>优化后的fibjs、使用cluster的nodejs、基于模块的nginx、使用多核的go<\/li>\n<\/ul>\n<h3>测试环境及方法<\/h3>\n<p>服务器<\/p>\n<blockquote>\n<p>CPU：8核（4sockets*2cores），每核2.1GHz <br />\n内存：24GB<\/p>\n<\/blockquote>\n<p>客户端（10个）<\/p>\n<blockquote>\n<p>CPU：1核，每核2.1GHz <br />\n内存：1GB<\/p>\n<\/blockquote>\n<p>测试流程：<\/p>\n<ol>\n<li>首先在服务器端开启server<\/li>\n<li>调度机ssh到客户端触发对服务器的wrk请求（测试时长为30min）<\/li>\n<li>测试的并发量从1w~10w，递增幅度为1w<\/li>\n<\/ol>\n<h3>测试项一：fibjs优化前后性能对比<\/h3>\n<p>3个版本的fibjs，分别为：<\/p>\n<ol>\n<li>v0: 原版fibjs<\/li>\n<li>v1: 优化了SOCKET_ BUFF_ SIZE大小<\/li>\n<li>v2: socket 等待时释放 buffer 内存<\/li>\n<\/ol>\n<h4>测试结果<\/h4>\n<p>QPS（req/sec）<\/p>\n<table>\n<thead>\n<tr>\n<th>\\<\/th>\n<th>v0<\/th>\n<th>v2<\/th>\n<th>v3<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td>10000<\/td>\n<td>12750<\/td>\n<td>15971<\/td>\n<td>17705<\/td>\n<\/tr>\n<tr>\n<td>20000<\/td>\n<td>12757<\/td>\n<td>15480<\/td>\n<td>17893<\/td>\n<\/tr>\n<tr>\n<td>30000<\/td>\n<td>12551<\/td>\n<td>15362<\/td>\n<td>18045<\/td>\n<\/tr>\n<tr>\n<td>40000<\/td>\n<td>11858<\/td>\n<td>15087<\/td>\n<td>17326<\/td>\n<\/tr>\n<tr>\n<td>50000<\/td>\n<td>11678<\/td>\n<td>15503<\/td>\n<td>17237<\/td>\n<\/tr>\n<tr>\n<td>60000<\/td>\n<td>11708<\/td>\n<td>15093<\/td>\n<td>16800<\/td>\n<\/tr>\n<tr>\n<td>70000<\/td>\n<td>10682<\/td>\n<td>14674<\/td>\n<td>16513<\/td>\n<\/tr>\n<tr>\n<td>80000<\/td>\n<td>9395<\/td>\n<td>14223<\/td>\n<td>15840<\/td>\n<\/tr>\n<tr>\n<td>90000<\/td>\n<td>8733<\/td>\n<td>13681<\/td>\n<td>15209<\/td>\n<\/tr>\n<tr>\n<td>100000<\/td>\n<td>8645<\/td>\n<td>13375<\/td>\n<td>14664<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>QPS曲线如下图：<\/p>\n<p><img src=\"https://github.com/xicilion/fibjs/raw/master/perf/http_server/pic/case1-QPS.png\" alt=\"case1-QPS\"><\/p>\n<p>内存占用（单位GB）<\/p>\n<table>\n<thead>\n<tr>\n<th>\\<\/th>\n<th>v0<\/th>\n<th>v1<\/th>\n<th>v2<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td>10000<\/td>\n<td>1.55<\/td>\n<td>0.37<\/td>\n<td>0.14<\/td>\n<\/tr>\n<tr>\n<td>20000<\/td>\n<td>2.95<\/td>\n<td>0.68<\/td>\n<td>0.22<\/td>\n<\/tr>\n<tr>\n<td>30000<\/td>\n<td>4.32<\/td>\n<td>1.05<\/td>\n<td>0.27<\/td>\n<\/tr>\n<tr>\n<td>40000<\/td>\n<td>5.82<\/td>\n<td>1.32<\/td>\n<td>0.35<\/td>\n<\/tr>\n<tr>\n<td>50000<\/td>\n<td>7.27<\/td>\n<td>1.63<\/td>\n<td>0.41<\/td>\n<\/tr>\n<tr>\n<td>60000<\/td>\n<td>8.79<\/td>\n<td>1.89<\/td>\n<td>0.47<\/td>\n<\/tr>\n<tr>\n<td>70000<\/td>\n<td>10.15<\/td>\n<td>2.32<\/td>\n<td>0.53<\/td>\n<\/tr>\n<tr>\n<td>80000<\/td>\n<td>11.57<\/td>\n<td>2.63<\/td>\n<td>0.6<\/td>\n<\/tr>\n<tr>\n<td>90000<\/td>\n<td>13.03<\/td>\n<td>2.98<\/td>\n<td>0.67<\/td>\n<\/tr>\n<tr>\n<td>100000<\/td>\n<td>14.5<\/td>\n<td>3.36<\/td>\n<td>0.79<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>内存占用曲线如下图：<\/p>\n<p><img src=\"https://github.com/xicilion/fibjs/raw/master/perf/http_server/pic/case1-Mem.png\" alt=\"case1-Mem\"><\/p>\n<h3>测试项二：优化后的fibjs与其他服务器性能对比<\/h3>\n<p>服务器分别为：<\/p>\n<ol>\n<li>优化后的fibjs\t\t\t(v0.1.7)<\/li>\n<li>使用了cluster的nodejs\t(v0.10.25)<\/li>\n<li>使用多核的go\t\t\t(v1.5.1)<\/li>\n<li>nginx模块\t\t\t\t(v1.9.2)<\/li>\n<\/ol>\n<h4>测试结果<\/h4>\n<p>QPS（req/sec）<\/p>\n<table>\n<thead>\n<tr>\n<th>\\<\/th>\n<th>fibjs<\/th>\n<th>nodejs<\/th>\n<th>go<\/th>\n<th>nginx<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td>10000<\/td>\n<td>17705<\/td>\n<td>8268<\/td>\n<td>22284<\/td>\n<td>19393<\/td>\n<\/tr>\n<tr>\n<td>20000<\/td>\n<td>17893<\/td>\n<td>5866<\/td>\n<td>21975<\/td>\n<td>19096<\/td>\n<\/tr>\n<tr>\n<td>30000<\/td>\n<td>18045<\/td>\n<td>4412<\/td>\n<td>21531<\/td>\n<td>18521<\/td>\n<\/tr>\n<tr>\n<td>40000<\/td>\n<td>17326<\/td>\n<td>2817<\/td>\n<td>21362<\/td>\n<td>18331<\/td>\n<\/tr>\n<tr>\n<td>50000<\/td>\n<td>17237<\/td>\n<td>2179<\/td>\n<td>21277<\/td>\n<td>18328<\/td>\n<\/tr>\n<tr>\n<td>60000<\/td>\n<td>16800<\/td>\n<td>1853<\/td>\n<td>21113<\/td>\n<td>17936<\/td>\n<\/tr>\n<tr>\n<td>70000<\/td>\n<td>16513<\/td>\n<td>1536<\/td>\n<td>21029<\/td>\n<td>17644<\/td>\n<\/tr>\n<tr>\n<td>80000<\/td>\n<td>15840<\/td>\n<td>1385<\/td>\n<td>20497<\/td>\n<td>16973<\/td>\n<\/tr>\n<tr>\n<td>90000<\/td>\n<td>15209<\/td>\n<td>1232<\/td>\n<td>19843<\/td>\n<td>16966<\/td>\n<\/tr>\n<tr>\n<td>100000<\/td>\n<td>14664<\/td>\n<td>1089<\/td>\n<td>19386<\/td>\n<td>16805<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>QPS曲线如下图<\/p>\n<p><img src=\"https://github.com/xicilion/fibjs/raw/master/perf/http_server/pic/case2-QPS.png\" alt=\"case2-QPS\"><\/p>\n<p>内存占用（单位GB）<\/p>\n<table>\n<thead>\n<tr>\n<th>\\<\/th>\n<th>fibjs<\/th>\n<th>nodejs<\/th>\n<th>go<\/th>\n<th>nginx<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td>10000<\/td>\n<td>0.14<\/td>\n<td>0.56<\/td>\n<td>0.37<\/td>\n<td>0.1<\/td>\n<\/tr>\n<tr>\n<td>20000<\/td>\n<td>0.22<\/td>\n<td>0.68<\/td>\n<td>0.68<\/td>\n<td>0.1<\/td>\n<\/tr>\n<tr>\n<td>30000<\/td>\n<td>0.27<\/td>\n<td>0.76<\/td>\n<td>1.05<\/td>\n<td>0.11<\/td>\n<\/tr>\n<tr>\n<td>40000<\/td>\n<td>0.35<\/td>\n<td>0.84<\/td>\n<td>1.32<\/td>\n<td>0.12<\/td>\n<\/tr>\n<tr>\n<td>50000<\/td>\n<td>0.41<\/td>\n<td>0.92<\/td>\n<td>1.63<\/td>\n<td>0.12<\/td>\n<\/tr>\n<tr>\n<td>60000<\/td>\n<td>0.47<\/td>\n<td>1.02<\/td>\n<td>1.89<\/td>\n<td>0.12<\/td>\n<\/tr>\n<tr>\n<td>70000<\/td>\n<td>0.53<\/td>\n<td>1.08<\/td>\n<td>2.32<\/td>\n<td>0.13<\/td>\n<\/tr>\n<tr>\n<td>80000<\/td>\n<td>0.6<\/td>\n<td>1.14<\/td>\n<td>2.63<\/td>\n<td>0.13<\/td>\n<\/tr>\n<tr>\n<td>90000<\/td>\n<td>0.67<\/td>\n<td>1.3<\/td>\n<td>2.98<\/td>\n<td>0.14<\/td>\n<\/tr>\n<tr>\n<td>100000<\/td>\n<td>0.79<\/td>\n<td>1.45<\/td>\n<td>3.36<\/td>\n<td>0.14<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>内存占用曲线如下图<\/p>\n<p><img src=\"https://github.com/xicilion/fibjs/raw/master/perf/http_server/pic/case2-Mem.png\" alt=\"case2-Mem\"><\/p>\n<p>服务器CPU占用情况<\/p>\n<table>\n<thead>\n<tr>\n<th>\\<\/th>\n<th>fibjs<\/th>\n<th>nodejs<\/th>\n<th>go<\/th>\n<th>nginx<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td>CPU占用率<\/td>\n<td>500~600<\/td>\n<td>(90~98)*8<\/td>\n<td>200~400<\/td>\n<td>(30~35)*8<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<h3>结论<\/h3>\n<p>模型<\/p>\n<ul>\n<li>fibjs和go均为单进程多线程 <br /><\/li>\n<li>nodejs(cluster)和nginx是多进程<\/li>\n<\/ul>\n<p>内存占用<\/p>\n<ul>\n<li>go平均每个请求所需内存最多，约为320KB<\/li>\n<li>fibjs和nodejs平均每个请求所需内存相差不多，均约为72KB，不过nodejs占用的固定内存多于fibjs<\/li>\n<li>nginx采用了Zero Copy技术，内存占用非常低<\/li>\n<\/ul>\n<p>QPS<\/p>\n<ul>\n<li>nginx和go都未跑满CPU，且在高并发下表现良好<\/li>\n<li>fibjs的http协议栈处理是多线程的，且CPU占用率高于nginx和go，在高并发情况下表现良好<\/li>\n<li>nodejs在3w并发时已基本跑满CPU，且性能下滑严重<\/li>\n<\/ul>\n<h3>相关代码<\/h3>\n<h4>服务器代码1_fibjs<\/h4>\n<pre class=\"prettyprint\"><code>var http = require(&#x27;http&#x27;),\n\tnet = require(&#x27;net&#x27;),\n\tcoroutine = require(&#x27;coroutine&#x27;);\n\nvar interval = 1000;\n\nvar hdlr = new http.Handler(function(req) {\n\tif (req.address == &quot;&#x2F;fibjs&quot;) {\n\t\treq.response.write(&#x27;Hello, World!&#x27;);\n\t}\n})\n\nvar demon = function() {\n\twhile (true) {\n\t\tconsole.error(&quot;connections:&quot;, svr.stats.connections,\n\t\t\t&quot;\\trequest:&quot;, hdlr.stats.request,\n\t\t\t&quot;\\tresponse:&quot;, hdlr.stats.response);\n\t\thdlr.stats.reset();\n\t\tsvr.stats.reset();\n\t\tcoroutine.sleep(interval);\n\t}\n}\n\nvar svr = new net.TcpServer(8080, hdlr);\n\ncoroutine.start(demon);\nsvr.run();\n<\/code><\/pre><h4>服务器代码2_使用cluster的nodejs<\/h4>\n<pre class=\"prettyprint\"><code>var cluster = require(&#x27;cluster&#x27;),\n\thttp = require(&#x27;http&#x27;),\n\turl = require(&#x27;url&#x27;),\n\tnumCPUs = require(&#x27;os&#x27;).cpus().length;\n\nif (cluster.isMaster) {\n\tconsole.log(&quot;master start...&quot;);\n\n\t&#x2F;&#x2F; Fork workers.\n\tfor (var i = 0; i &lt; numCPUs; i++) {\n\t\tcluster.fork();\n\t}\n\n\tcluster.on(&#x27;listening&#x27;, function(worker, address) {\n\t\tconsole.log(&#x27;listening: worker &#x27; + worker.process.pid + &#x27;, Address: &#x27; + address.address + &quot;:&quot; + address.port);\n\t});\n\n\tcluster.on(&#x27;exit&#x27;, function(worker, code, signal) {\n\t\tconsole.log(&#x27;worker &#x27; + worker.process.pid + &#x27; died&#x27;);\n\t});\n} else {\n\thttp.createServer(function(req, res) {\n\t\tvar pathname = url.parse(req.url).pathname;\n\t\tif (&quot;&#x2F;node&quot; === pathname) {\n\t\t\tres.writeHead(200);\n\t\t\tres.end(&quot;Hello World!\\n&quot;);\n\t\t}\n\t}).listen(8080);\n}\n<\/code><\/pre><h4>服务器代码3_使用多核的go<\/h4>\n<pre class=\"prettyprint\"><code>package main\nimport (\n    &quot;net&#x2F;http&quot;\n    &quot;runtime&quot;\n    &quot;log&quot;\n)\n\nfunc hdlr_hello(rw http.ResponseWriter, req *http.Request) {\n    req.ParseForm()  \n    rw.Write([]byte(&quot;Hello world!&quot;))\n}\n\nfunc main() {\n    runtime.GOMAXPROCS(runtime.NumCPU())\n    http.HandleFunc(&quot;&#x2F;go&quot;, hdlr_hello) &#x2F;&#x2F;设置访问的路由\n    err := http.ListenAndServe(&quot;:8083&quot;, nil) &#x2F;&#x2F;设置监听的端口\n    if err != nil {\n        log.Fatal(&quot;ListenAndServe: &quot;, err)\n        &#x2F;&#x2F; panic(err)\n    }\n}\n<\/code><\/pre><h4>服务器代码4_nginx模块<\/h4>\n<pre class=\"prettyprint\"><code>#include &lt;ngx_config.h&gt; \n#include &lt;ngx_core.h&gt; \n#include &lt;ngx_http.h&gt; \n#include &lt;ngx_buf.h&gt;\n\n&#x2F;*\n *cf   指向ngx_conf_t 结构体指针，从指令后面传过来的参数 \n *cmd  指向当前结构体ngx_command_t 的指针(互相指) \n *conf 指向自定义模块配置结构体的指针 \n *&#x2F;\nstatic char *ngx_http_hello_world(ngx_conf_t *cf, ngx_command_t *cmd, void *conf); \n\nstatic ngx_command_t ngx_http_hello_world_commands[]={ \n    { \n        ngx_string(&quot;hello_world&quot;),          &#x2F;&#x2F;指令名称，nginx.conf中使用 \n        NGX_HTTP_LOC_CONF|NGX_CONF_NOARGS,  &#x2F;&#x2F;注释1 \n        ngx_http_hello_world,               &#x2F;&#x2F;回调函数，上面申明 \n        0,                                  &#x2F;&#x2F;保持的值存放位置：全局，server，location \n        0,                                  &#x2F;&#x2F;指令的值保存位置 \n        NULL                                \n    }, \n    ngx_null_command  &#x2F;&#x2F;读入ngx_null_command 指令后停止 \n}; \n\n&#x2F;&#x2F;ngx_http_&lt;module name&gt;_module_ctx用于创建和合并三个配置 \nstatic ngx_http_module_t ngx_http_hello_world_module_ctx={ \n    NULL,   &#x2F;&#x2F;preconfiguration \n    NULL,   &#x2F;&#x2F;postconfiguration \n    NULL,   &#x2F;&#x2F;create main configuration \n    NULL,   &#x2F;&#x2F;init main configuration \n    NULL,   &#x2F;&#x2F;create server configuration \n    NULL,   &#x2F;&#x2F;merge server configuration \n    NULL,   &#x2F;&#x2F;create location configuration \n    NULL    &#x2F;&#x2F;merge localtion configuration \n};\n\n&#x2F;&#x2F;nginx进程，线程相关，ngx_http_&lt;module name&gt;_module把数据处理关联到特定模块\nngx_module_t ngx_http_hello_world_module={ \n    NGX_MODULE_V1, \n    &amp;ngx_http_hello_world_module_ctx,   &#x2F;&#x2F;module context \n    ngx_http_hello_world_commands,      &#x2F;&#x2F;module directives \n    NGX_HTTP_MODULE,                    &#x2F;&#x2F;module type \n    NULL,\t&#x2F;&#x2F;init master \n    NULL,\t&#x2F;&#x2F;init module \n    NULL,\t&#x2F;&#x2F;init process \n    NULL,\t&#x2F;&#x2F;init thread \n    NULL,\t&#x2F;&#x2F;exit thread \n    NULL,\t&#x2F;&#x2F;exit process \n    NULL,\t&#x2F;&#x2F;exit master \n    NGX_MODULE_V1_PADDING \n};\n\nstatic ngx_int_t ngx_http_hello_world_handler(ngx_http_request_t *r) \n{\n    if(!(r-&gt;method &amp; NGX_HTTP_GET))\n        return NGX_HTTP_NOT_ALLOWED;\n \n    ngx_int_t rc = ngx_http_discard_request_body(r);\n    if(rc != NGX_OK)\n        return rc;\n \n    ngx_str_t type = ngx_string(&quot;text&#x2F;plain&quot;);\n    ngx_str_t response = ngx_string(&quot;Hello World!&quot;);\n    r-&gt;headers_out.status = NGX_HTTP_OK;\n    r-&gt;headers_out.content_length_n = response.len;\n    r-&gt;headers_out.content_type = type;\n \n    rc = ngx_http_send_header(r);\n    if(rc == NGX_ERROR || rc &gt; NGX_OK || r-&gt;header_only)\n        return rc;\n \n    ngx_buf_t *b;\n    b = ngx_create_temp_buf(r-&gt;pool, response.len);\n    if(b == NULL)\n        return NGX_HTTP_INTERNAL_SERVER_ERROR;\n \n    ngx_memcpy(b-&gt;pos, response.data, response.len);\n    b-&gt;last = b-&gt;pos + response.len;\n    b-&gt;last_buf = 1;\n \n    ngx_chain_t out;\n    out.buf = b;\n    out.next = NULL;\n        \n    return ngx_http_output_filter(r,&amp;out); \n}\n\n&#x2F;&#x2F;回调函数，1获得location中的\u201c核心\u201d结构体，2为他分配个处理函数 \nstatic char *ngx_http_hello_world(ngx_conf_t *cf,ngx_command_t *cmd,void *conf) \n{ \n    ngx_http_core_loc_conf_t *clcf; \n\n    clcf = ngx_http_conf_get_module_loc_conf(cf,ngx_http_core_module); \n    clcf-&gt;handler = ngx_http_hello_world_handler; \n    return NGX_CONF_OK; \n} \n<\/code><\/pre><p>###脚本_集群调度<\/p>\n<pre class=\"prettyprint\"><code>#!&#x2F;usr&#x2F;bash\n\nif [ $# -lt 1 ]; then\n\techo &quot;&quot;\n\techo &quot;option [conn | close]&quot;\n\techo &quot;&quot;\n\texit 0\nfi\n\nuser=verdant\nconcurrency=50000\nduration=600\nlogdir=&quot;log&#x2F;&quot;\nlogfile=&quot;ctrl.log.&quot;\nip_array=(&quot;171&quot; &quot;193&quot; &quot;209&quot; &quot;213&quot; &quot;231&quot; &quot;219&quot; &quot;222&quot; &quot;223&quot; &quot;224&quot; &quot;225&quot;)  \nconn=$(($concurrency&#x2F;${#ip_array[*]}))\nsleeptime=1\n# sleeptime=$(($concurrency&#x2F;10000+1))\n\nremote_cmd=&quot;~&#x2F;wrk -t10 -c$conn -d&quot;&quot;$duration&quot;&quot;s http:&#x2F;&#x2F;192.168.1.61:8080&#x2F;fibjs&quot;\n# remote_cmd=&quot;~&#x2F;wrk -t10 -c$conn -d&quot;&quot;$duration&quot;&quot;s http:&#x2F;&#x2F;192.168.1.61:8080&#x2F;node&quot;\n# remote_cmd=&quot;~&#x2F;wrk -t10 -c$conn -d&quot;&quot;$duration&quot;&quot;s http:&#x2F;&#x2F;192.168.1.61:8080&#x2F;go&quot; \n# remote_cmd=&quot;~&#x2F;wrk -t10 -c$conn -d&quot;&quot;$duration&quot;&quot;s http:&#x2F;&#x2F;192.168.1.61:8080&#x2F;nginx&quot;\n\nfunction main()\n{\n\techo &quot;${#ip_array[*]} client each: $conn&quot;\n\tfor ip in ${ip_array[*]}  \n\tdo  \n\t\tif [ -e &quot;$logdir$logfile$ip&quot; ]; then\n\t\t\trm &quot;$logdir$logfile$ip&quot;\n\t\tfi\t   \n\tdone\n\n\tif [ $1 = &#x27;close&#x27; ]; then\n\t\tfor ip in ${ip_array[*]}  \n\t\tdo  \t \n\t    \tresult=$(ssh -t -t $user@&quot;192.168.1.&quot;$ip &quot;killall -9 wrk&quot;&gt;&gt; $logdir$logfile$ip &amp;)\n\t    \tsleep &quot;$sleeptime&quot;\n\t    \techo $result\n\t    done\n\t\texit 0\n\tfi\n\n\tif [ $1 = &#x27;conn&#x27; ]; then\n\t\tfor ip in ${ip_array[*]}  \n\t\tdo  \t \n\t    \tssh -t -t $user@&quot;192.168.1.&quot;$ip &quot;$remote_cmd&quot;&gt;&gt; $logdir$logfile$ip &amp;  \n\t    \tsleep &quot;$sleeptime&quot;\n\t\tdone \n\tfi\n}\n\nfunction recovery()\n{\n\trunning=0\n\tserver_ok=()\n\twhile [ $running -ne ${#ip_array[*]} ]\n\tdo\n\t\tfor ip in ${ip_array[*]}  \n\t\tdo  \t\n\t\t\tif [ ! -s &quot;$logdir$logfile$ip&quot; ]; then \n\t\t\t\techo &quot;restart:&quot;&quot;$logdir$logfile$ip&quot;\n\t\t\t\tsleep $((5*$sleeptime))\n\t\t\t\tssh -t -t $user@&quot;192.168.1.&quot;$ip &quot;killall -9 wrk&quot;\n\t\t\t\tsleep $((10*$sleeptime))\n\t\t\t\tssh -t -t $user@&quot;192.168.1.&quot;$ip &quot;$remote_cmd&quot;&gt;&gt; $logdir$logfile$ip &amp;\n\t\t\telse\n\t\t\t\tif [[ &quot;${server_ok[@]&#x2F;$ip&#x2F;}&quot; = &quot;${server_ok[@]}&quot; ]]; then\n\t\t\t\t\tserver_ok[${#server_ok[@]}]=$ip\n\t\t\t\t\trunning=$(($running+1))\n\t\t\t\tfi\n\t\t\tfi\n    \tdone\n    done\n}\n\nfunction calculate()\n{\n\tresult1=0\n\tresult2=1\n\twhile [ $1 = &#x27;conn&#x27; -a $result1 != $result2 ]\n\tdo\n\t\tresult1=&#96;cat $logdir$logfile*|grep Requests&#x2F;sec|awk &#x27;{print $2}&#x27;|awk &#x27;{sum+=$1} END {print sum}&#x27;&#96;\n\t\tif [ &quot;$result1&quot; = &quot;&quot; ]; then\n\t\t\tresult1=0\n\t\t\tsleep 10\n\t\t\tcontinue\n\t\tfi\n\t\tsleep 10\n\t\tresult2=&#96;cat $logdir$logfile*|grep Requests&#x2F;sec|awk &#x27;{print $2}&#x27;|awk &#x27;{sum+=$1} END {print sum}&#x27;&#96;\n\tdone\n\techo &quot;Requests&#x2F;sec: $result1&quot;\n\tcat $logdir$logfile*|grep Latency\n}\n\nmain $1\nsleep $((${#ip_array[*]}*$sleeptime))\n\n#客户端异常重连机制\nif [ $1 = &#x27;conn&#x27; ]; then\n\trecovery  \nfi\n\nsleep $duration\necho &quot;calculate...&quot;\ncalculate $1\n<\/code><\/pre><\/div>","title":"很久没来，丢一份前阵子做的 10 万连接性能测试 (fibjs, golang, nginx, nodejs)","last_reply_at":"2016-04-26T08:50:26.625Z","good":true,"top":false,"reply_count":58,"visit_count":4200,"create_at":"2015-12-17T14:01:35.214Z","author":{"loginname":"xicilion","avatar_url":"https://avatars.githubusercontent.com/u/1694747?v=3&s=120"}},{"id":"571f2b55fa48138c41110e1a","author_id":"571f27695a26c4a841ecbd67","tab":"ask","content":"<div class=\"markdown-text\"><p>因项目需求，将一个网站用electron封装做个客户端。其它都没问题,只是 jquery不能正常导入，一运行有jquery的网页就会报，\nUncaught ReferenceError: $ is not defined 这个错误，之前有解决electron的办法是用nodejs的require,\nwindow.$ = window.jQuery = require(&quot;\u2026/\u2026/lib/jquery-2.2.0.min.js&quot;);\n如果网页是本地的地址没有任何总是可以正常使用，但是网页是是服务器端的远程地址electron.BrowserWindow.loadURL(\u201c<a href=\"http://www.xxx.com\">http://www.xxx.com<\/a>\u201d）,nodejs的require不能导入自己的和第三方安装的模块，只能导node自带的模块(fs,http,path\u2026)。\n这个总是已经卡了好几天了，大神们有什么好的办法让有jquery在网页正常在electron环境下运行吗?<\/p>\n<\/div>","title":"electron中怎样导入jquery不报错","last_reply_at":"2016-04-26T08:48:21.724Z","good":false,"top":false,"reply_count":0,"visit_count":9,"create_at":"2016-04-26T08:48:21.724Z","author":{"loginname":"jykl","avatar_url":"https://avatars.githubusercontent.com/u/6770307?v=3&s=120"}},{"id":"571f2abf5a26c4a841ecbd6b","author_id":"56ac4d7f26d02fc6626bb3b1","tab":"ask","content":"<div class=\"markdown-text\"><p>Promise可不可以做到声明一个全局变量,通过.then()来对这个全局变量进行修改，然后再将这个被修改的全局变量传入其他Promise中呢？这些Promise全都是并发的，不存在依赖，而且通过for(var i=0;i&lt;arr.length;i++){\nswitch(arr[i]){\ncase \u20181\u2019: Promise1\ncase \u20182\u2019: Promise2\n}\n来执行根据不同的条件执行不同的Promise,最后再返回被修改了的全局变量<\/p>\n<\/div>","title":"Promise传值问题","last_reply_at":"2016-04-26T08:45:51.323Z","good":false,"top":false,"reply_count":0,"visit_count":16,"create_at":"2016-04-26T08:45:51.323Z","author":{"loginname":"oyosc","avatar_url":"https://avatars.githubusercontent.com/u/13896491?v=3&s=120"}},{"id":"571ec9bd5a26c4a841ecbd18","author_id":"571ec8af35af8a704195f3dc","tab":"ask","content":"<div class=\"markdown-text\"><p>谁玩过 请教一下大神们<\/p>\n<\/div>","title":"NodeMailer","last_reply_at":"2016-04-26T08:43:41.750Z","good":false,"top":false,"reply_count":3,"visit_count":100,"create_at":"2016-04-26T01:51:57.254Z","author":{"loginname":"13241491189","avatar_url":"https://avatars.githubusercontent.com/u/14305704?v=3&s=120"}},{"id":"571f28c535af8a704195f418","author_id":"55ac6e968834fbb55261c589","tab":"ask","content":"<div class=\"markdown-text\"><p>正在写上传文件显示进度条的例子\nCan\u2019t set headers after they are sent\n报了一个这样的错\n百度了一下说是\n\u201c发现是在redirect或者render之后，node并不会跳出代码段，中断下面的执行，而是继续往下执行，当再次redirect或者render的时候，就会出现这个错误。要在redirect和render之前适时加上return，结束它们之后的代码执行，可以避免这个错误。\u201d\n可加载进度条应该是无刷新的呀试了试加next，还是报。。。\n下面是代码，大伙帮忙看一下这里应该如何处理比较合理呢<\/p>\n<p><img src=\"//dn-cnode.qbox.me/Fkj1Gn4orcs1O5U88jcEDmseg1TY\" alt=\"9991.png\">\n↑node后台\n<img src=\"//dn-cnode.qbox.me/FpbsXLx4MsOnvDT3UJGtvEqizbgf\" alt=\"9992.png\">\n↑js前台\n<img src=\"//dn-cnode.qbox.me/FhNBs2yU3-IDsVHUlbtNtPImLhCD\" alt=\"9993.png\">\n↑控制台打印错误<\/p>\n<\/div>","title":"【小白求问】关于上传文件显示进度的问题2","last_reply_at":"2016-04-26T08:42:21.495Z","good":false,"top":false,"reply_count":1,"visit_count":21,"create_at":"2016-04-26T08:37:25.827Z","author":{"loginname":"jioyou","avatar_url":"https://avatars.githubusercontent.com/u/13229266?v=3&s=120"}},{"id":"571eaa34fa48138c41110dc3","author_id":"54009f5ccd66f2eb37190485","tab":"share","content":"<div class=\"markdown-text\"><p>作为一个工程师，我们向往自由，或者说是做自己喜欢做的事儿，无论有木有人督促你，只要有时间就会尽力去做。<\/p>\n<ul>\n<li>自我驱动<\/li>\n<li>责任感<\/li>\n<li>自由<\/li>\n<li>尽力<\/li>\n<\/ul>\n<p>我觉得这是做开源项目最大的好处，秉承了对自由的珍惜，以自我驱动的责任感来保护这块内心的净土。<\/p>\n<p>你可以有成就感，做出好东西，你可以学习，不同人的沟通总有火花，你可以成长，获得更多你想要的东西。<\/p>\n<p>这些都还好，可是你想过它的苦么？<\/p>\n<ul>\n<li>你提了issue，我不一定能立即处理<\/li>\n<li>你提的pr，我不一定会merge<\/li>\n<li>你的风格和质量，未必是我想要的<\/li>\n<\/ul>\n<p>于是开源世界了，也充满了各种恩怨。。。这其实也是一个江湖。。。<\/p>\n<p>做社区其实也是一样的，我们志在推广和维护一个好的社区环境，让更多人有归属感，能够分享，能够答疑解惑，能够做朋友，无论线上还是线下。<\/p>\n<p>我们可以对比开源的几个点，社区也是自我驱动，也靠个人的责任感，也向往自由，也希望尽力帮助到更多的人，可是人多了就难免了，不是说一个人的管理极限是7个人么？可是当你面对无数人的时候呢？还是挺可怕的一件事儿<\/p>\n<p>举个2个例子<\/p>\n<ul>\n<li>1）有人在公众号里喷我，言辞犀利<\/li>\n<li>2）有人问我问题，我没有立即回答，恼羞成怒，立马拉黑（我回复的时候，需要开启好友确认。。。）<\/li>\n<\/ul>\n<p>心累啊，我其实每天并没有很多时间，创业公司里一堆事（开会，架构，政委，招人），开源里给自己挖了一堆坑，准备分享，写写书和文章，stuq的在线教育，还有我人生里最重要的大事，我能有的自由的前提就是陪好媳妇。。。<\/p>\n<p>宝宝心里苦，宝宝不想说，还是相互理解吧<\/p>\n<\/div>","title":"宝宝心里苦，宝宝不想说，还是相互理解吧","last_reply_at":"2016-04-26T08:32:48.344Z","good":false,"top":false,"reply_count":25,"visit_count":433,"create_at":"2016-04-25T23:37:24.542Z","author":{"loginname":"i5ting","avatar_url":"https://avatars.githubusercontent.com/u/3118295?v=3&s=120"}},{"id":"571f095d5a26c4a841ecbd44","author_id":"55a867a408f6814b602ab7a6","tab":"ask","content":"<div class=\"markdown-text\"><p>用<code>koa-generator<\/code>生成了一个项目，但是在vsc中debug的时候报错\n<code>request 'launch': cannot launch program '/path/to/project/bin/run'; enabling source maps might help<\/code>\n然后，我把<code>launch.json<\/code>中的<code>sourceMaps<\/code>改成<code>true<\/code>，又报错\n<code>request 'launch': cannot launch program '/path/to/project/bin/run'; setting the 'outDir' attribute might help<\/code>\n这个<code>outDir<\/code>各种改还是报上面的错误<\/p>\n<p>于是我又试着不用<code>Launch<\/code>使用<code>Attach<\/code>，<code>./node_modules/.bin/runkoa bin/www --debug<\/code>运行起来之后，使用<code>Attach debug<\/code>，还是不行\n<code>request 'attach': cannot connect to runtime process (timeout after 10000ms)<\/code><\/p>\n<p>请问各位大神，应该怎么办？<\/p>\n<\/div>","title":"koa-generator生成的koa2项目怎么在vsc中debug？","last_reply_at":"2016-04-26T08:20:28.334Z","good":false,"top":false,"reply_count":4,"visit_count":85,"create_at":"2016-04-26T06:23:25.382Z","author":{"loginname":"SinalVee","avatar_url":"https://avatars.githubusercontent.com/u/3654490?v=3&s=120"}},{"id":"571ed2bb35af8a704195f3e1","author_id":"55b5d4dd0b2974890124e506","tab":"ask","content":"<div class=\"markdown-text\"><p>nodejs语法写错了,报错的地方很可能位置不对\n各位怎么检查语法错误的\n是下载个语法检查的东西吗？<\/p>\n<\/div>","title":"怎么检查语法错误","last_reply_at":"2016-04-26T08:11:12.434Z","good":false,"top":false,"reply_count":3,"visit_count":103,"create_at":"2016-04-26T02:30:19.147Z","author":{"loginname":"wtcsy","avatar_url":"https://avatars.githubusercontent.com/u/7374706?v=3&s=120"}},{"id":"571e0c563f27a7c841bcb5e1","author_id":"56754094ca8114350c161422","tab":"ask","content":"<div class=\"markdown-text\"><p>希望大神别喷我，别打我，问题如下：\n<img src=\"//dn-cnode.qbox.me/FtfPzXlkRTUUzqF3bg94LF9LQhaQ\" alt=\"QQ截图20160425201946.png\">\n如何让mysql异步里的option return成为checkname的返回值。不使用callback。\n现在这样写就直接返回定义的null了，内部还没来得及执行。\n求指导，谢谢<\/p>\n<\/div>","title":"异步return的问题.","last_reply_at":"2016-04-26T08:10:41.714Z","good":false,"top":false,"reply_count":21,"visit_count":187,"create_at":"2016-04-25T12:23:50.265Z","author":{"loginname":"fangker","avatar_url":"https://avatars.githubusercontent.com/u/16358646?v=3&s=120"}},{"id":"56a3c5d77ec020ed4b96b2cc","author_id":"504c28a2e2b845157708cb61","tab":"share","content":"<div class=\"markdown-text\"><p>是不是少了一点存在感 ლ(ﾟдﾟლ)<\/p>\n<\/div>","title":"微博上前端撕得那么狠，没撕到我们 Node 社区来....","last_reply_at":"2016-04-26T07:56:43.536Z","good":false,"top":false,"reply_count":113,"visit_count":5327,"create_at":"2016-01-23T18:26:31.207Z","author":{"loginname":"alsotang","avatar_url":"https://avatars.githubusercontent.com/u/1147375?v=3&s=120"}},{"id":"571e0c445a26c4a841ecbcf1","author_id":"544127406ab98d6c509e01d1","tab":"share","content":"<div class=\"markdown-text\"><p>之前的<a href=\"https://github.com/DavidCai1993/my-blog/blob/master/2016/2/%E9%80%9A%E8%BF%87%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90Node.js%E4%B8%AD%E5%AF%BC%E6%B5%81%EF%BC%88pipe%EF%BC%89%E7%9A%84%E5%AE%9E%E7%8E%B0.md\">文章<\/a>里有说，在 Node.js 中，流（<code>stream<\/code>）是许许多多原生对象的父类，角色可谓十分重要。但是，当我们沿着\u201c族谱\u201d往上看时，会发现 <code>EventEmitter<\/code> 类是流（<code>stream<\/code>）类的父类，所以可以说，<code>EventEmitter<\/code> 类是 Node.js 的根基类之一，地位可显一般。虽然 <code>EventEmitter<\/code> 类暴露的接口并不多而且十分简单，并且是少数纯 <code>JavaScript<\/code> 实现的模块之一，但因为它的应用实在是太广泛，身份太基础，所以在它的实现里处处闪光着一些优化代码执行效率，和保证极端情况下代码结果正确性的小细节。在了解之后，我们也可以将其使用到我们的日常编码之后，学以致用。<\/p>\n<p>好，现在就让我们跟随 Node.js 项目中的 <code>lib/events.js<\/code> 中的代码，来逐一了解：<\/p>\n<ul>\n<li>效率更高的 键 / 值 对存储对象的创建。<\/li>\n<li>效率更高的从数组中去除一个元素。<\/li>\n<li>效率更高的不定参数的函数调用。<\/li>\n<li>如果防止在一个事件监听器中监听同一个事件，接而导致死循环？<\/li>\n<li><code>emitter.once<\/code> 是怎么办到的？<\/li>\n<\/ul>\n<h2>效率更高的 键 / 值 对存储对象的创建<\/h2>\n<p>在 <code>EventEmitter<\/code> 类中，以 键 / 值 对的方式来存储事件名和对应的监听器。在 <code>Node.js<\/code>里 ，最简单的 键 / 值 对的存储方式就是直接创建一个空对象：<\/p>\n<pre class=\"prettyprint language-js\"><code>let store = {}\nstore.key = &#x27;value&#x27;\n<\/code><\/pre><p>你可能会说，ES2015 中的 <code>Map<\/code> 已经在目前版本的 Node.js 中可用了，在语义上它更有优势：<\/p>\n<pre class=\"prettyprint language-js\"><code>let store = new Map()\nstore.set(&#x27;key&#x27;, &#x27;value&#x27;)\n<\/code><\/pre><p>不过，你可能只需要一个纯粹的 键 / 值 对存储对象，并不需要 <code>Object<\/code> 和 <code>Map<\/code> 这两个类的原型中的提供的那些多余的方法，所以你直接：<\/p>\n<pre class=\"prettyprint language-js\"><code>let store = Object.create(null)\nstore.key = &#x27;value&#x27;\n<\/code><\/pre><p>好，我们已经做的挺极致了，但这还不是 <code>EventEmitter<\/code> 中的最终实现，它的办法是使用一个空的构造函数，并且把这个构造的原型事先置空：<\/p>\n<pre class=\"prettyprint language-js\"><code>function Store () {}\nStore.prototype = Object.create(null)\n<\/code><\/pre><p>然后：<\/p>\n<pre class=\"prettyprint language-js\"><code>let store = new Store()\nstore.key = &#x27;value&#x27;\n<\/code><\/pre><p>现在让我们来比一比效率，代码：<\/p>\n<pre class=\"prettyprint language-js\"><code>&#x2F;* global suite bench *&#x2F;\n&#x27;use strict&#x27;\n\nsuite(&#x27;key &#x2F; value store&#x27;, function () {\n  function Store () {}\n  Store.prototype = Object.create(null)\n\n  bench(&#x27;let store = {}&#x27;, function () {\n    let store = {}\n    store.key = &#x27;value&#x27;\n  })\n\n  bench(&#x27;let store = new Map()&#x27;, function () {\n    let store = new Map()\n    store.set(&#x27;key&#x27;, &#x27;value&#x27;)\n  })\n\n  bench(&#x27;let store = Object.create(null)&#x27;, function () {\n    let store = Object.create(null)\n    store.key = &#x27;value&#x27;\n  })\n\n  bench(&#x27;EventEmitter way&#x27;, function () {\n    let store = new Store()\n    store.key = &#x27;value&#x27;\n  })\n})\n<\/code><\/pre><p>比较结果：<\/p>\n<pre class=\"prettyprint\"><code>                      key &#x2F; value store\n      83,196,978 op&#x2F;s » let store = {}\n       4,826,143 op&#x2F;s » let store = new Map()\n       7,405,904 op&#x2F;s » let store = Object.create(null)\n     165,608,103 op&#x2F;s » EventEmitter way\n<\/code><\/pre><h2>效率更高的从数组中去除一个元素<\/h2>\n<p>在 <code>EventEmitter#removeListener<\/code> 这个 API 的实现里，需要从存储的监听器数组中除去一个元素，我们首先想到的就是使用 <code>Array#splice<\/code> 这个 API ，即 <code>arr.splice(i, 1)<\/code> 。不过这个 API 所提供的功能过于多了，它支持去除自定义数量的元素，还支持向数组中添加自定义的元素。所以，源码中选择自己实现一个最小可用的：<\/p>\n<pre class=\"prettyprint language-js\"><code>&#x2F;&#x2F; lib&#x2F;events.js\n&#x2F;&#x2F; ...\n\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k &lt; n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n<\/code><\/pre><p>比一比，代码：<\/p>\n<pre class=\"prettyprint language-js\"><code>&#x2F;* global suite bench *&#x2F;\n&#x27;use strict&#x27;\n\nsuite(&#x27;Remove one element from an array&#x27;, function () {\n  function spliceOne (list, index) {\n    for (var i = index, k = i + 1, n = list.length; k &lt; n; i += 1, k += 1) {\n      list[i] = list[k]\n    }\n    list.pop()\n  }\n\n  bench(&#x27;Array#splice&#x27;, function () {\n    let array = [1, 2, 3]\n    array.splice(1, 1)\n  })\n\n  bench(&#x27;EventEmitter way&#x27;, function () {\n    let array = [1, 2, 3]\n    spliceOne(array, 1)\n  })\n})\n<\/code><\/pre><p>结果，好吧，秒了：<\/p>\n<pre class=\"prettyprint\"><code>                      Remove one element from an array\n       4,262,168 op&#x2F;s » Array#splice\n      54,829,749 op&#x2F;s » EventEmitter way\n<\/code><\/pre><h2>效率更高的不定参数的函数调用<\/h2>\n<p>在事件触发时，监听器拥有的参数数量是任意的，所以源码中优化了不定参数的函数调用。<\/p>\n<p>不过好吧，这里使用的是笨办法，即\u2026把不定参数的函数调用转变成固定参数的函数调用，且最多支持到三个参数：<\/p>\n<pre class=\"prettyprint language-js\"><code>&#x2F;&#x2F; lib&#x2F;events.js\n&#x2F;&#x2F; ...\n\nfunction emitNone(handler, isFn, self) {\n  &#x2F;&#x2F; ...\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  &#x2F;&#x2F; ...\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  &#x2F;&#x2F; ...\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  &#x2F;&#x2F; ...\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  &#x2F;&#x2F; ...\n}\n<\/code><\/pre><p>虽然结果不言而喻，我们还是比较下会差多少，以三个参数为例：<\/p>\n<pre class=\"prettyprint language-js\"><code>&#x2F;* global suite bench *&#x2F;\n&#x27;use strict&#x27;\n\nsuite(&#x27;calling function with any amount of arguments&#x27;, function () {\n  function nope () {}\n\n  bench(&#x27;Function#apply&#x27;, function () {\n    function callMany () { nope.apply(null, arguments) }\n    callMany(1, 2, 3)\n  })\n\n  bench(&#x27;EventEmitter way&#x27;, function () {\n    function callThree (a, b, c) { nope.call(null, a, b, c) }\n    callThree(1, 2, 3)\n  })\n})\n<\/code><\/pre><p>结果显示差了一倍：<\/p>\n<pre class=\"prettyprint\"><code>                      calling function with any amount of arguments\n      11,354,996 op&#x2F;s » Function#apply\n      23,773,458 op&#x2F;s » EventEmitter way\n<\/code><\/pre><h2>如果防止在一个事件监听器中监听同一个事件，接而导致死循环？<\/h2>\n<p>在注册事件监听器时，你可否曾想到过这种情况：<\/p>\n<pre class=\"prettyprint language-js\"><code>&#x27;use strict&#x27;\nconst EventEmitter = require(&#x27;events&#x27;)\n\nlet myEventEmitter = new EventEmitter()\n\nmyEventEmitter.on(&#x27;wtf&#x27;, function wtf () {\n  myEventEmitter.on(&#x27;wtf&#x27;, wtf)\n})\n\nmyEventEmitter.emit(&#x27;wtf&#x27;)\n<\/code><\/pre><p>运行上述代码，是否会直接导致死循环？答案是不会，因为源码中做了处理。<\/p>\n<p>我们先看一下具体的代码：<\/p>\n<pre class=\"prettyprint language-js\"><code>&#x2F;&#x2F; lib&#x2F;events.js\n&#x2F;&#x2F; ...\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i &lt; len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\n&#x2F;&#x2F; ...\nfunction arrayClone(arr, i) {\n  var copy = new Array(i);\n  while (i--)\n    copy[i] = arr[i];\n  return copy;\n}\n<\/code><\/pre><p>其中的 <code>handler<\/code> 便是具体的事件监听器数组，不难看出，源码中的解决方案是，使用 <code>arrayClone<\/code> 方法，拷贝出另一个一模一样的数组，来执行它，这样一来，当我们在监听器内监听同一个事件时，的确给原监听器数组添加了新的函数，但并没有影响到当前这个被拷贝出来的副本数组。<\/p>\n<h2><code>emitter.once<\/code> 是怎么办到的<\/h2>\n<p>这个很简单，使用了闭包：<\/p>\n<pre class=\"prettyprint language-js\"><code>function _onceWrap(target, type, listener) {\n  var fired = false;\n  function g() {\n    target.removeListener(type, g);\n    if (!fired) {\n      fired = true;\n      listener.apply(target, arguments);\n    }\n  }\n  g.listener = listener;\n  return g;\n}\n<\/code><\/pre><p>你可能会问，我既然已经在 <code>g<\/code> 函数中的第一行中移除了当前的监听器，为何还要使用 <code>fired<\/code> 这个 flag ？我个人觉得是因为，在 <code>removeListener<\/code> 这个同步方法中，会将这个 <code>g<\/code> 函数暴露出来给 <code>removeListener<\/code> 事件的监听器，所以该 flag 用来保证 <code>once<\/code> 注册的函数只会被调用一次。<\/p>\n<h2>最后<\/h2>\n<p>分析就到这里啦，在了解了这些做法之后，在今后我们写一些有性能要求的底层工具库等东西时，我们便可以用上它们啦。<code>EventEmitter<\/code> 类的源码并不复杂，并且是纯 <code>JavaScript<\/code> 实现的，所以也非常推荐大家闲时一读。<\/p>\n<p>参考：<\/p>\n<ul>\n<li><a href=\"https://github.com/nodejs/node/blob/master/lib/events.js\">https://github.com/nodejs/node/blob/master/lib/events.js<\/a><\/li>\n<\/ul>\n<\/div>","title":"通过源码解析 Node.js 中 events 模块里的优化小细节","last_reply_at":"2016-04-26T07:51:25.383Z","good":true,"top":false,"reply_count":19,"visit_count":453,"create_at":"2016-04-25T12:23:32.189Z","author":{"loginname":"DavidCai1993","avatar_url":"https://avatars.githubusercontent.com/u/5886475?v=3&s=120"}},{"id":"571cbec235af8a704195f347","author_id":"54009f5ccd66f2eb37190485","tab":"share","content":"<div class=\"markdown-text\"><p>真心不懂linux xxx的公众号为啥要转这篇文章。。。。还是转给cnode的小伙伴看看吧，不推荐使用，只要知道好了，千万别写这样的代码<\/p>\n<h2>Summary<\/h2>\n<p>本文秉承着<\/p>\n<blockquote>\n<p>你看不懂是你sb，我写的代码就要牛逼<\/p>\n<\/blockquote>\n<p>的理念来介绍一些js的装逼技巧。<\/p>\n<p>下面的技巧，后三个，请谨慎用于团队项目中(主要考虑到可读性的问题)，不然，leader 干你没商量。<\/p>\n<h2>Boolean<\/h2>\n<p>这个技巧用的很多，也非常的简单<\/p>\n<pre class=\"prettyprint\"><code>!!&#x27;foo&#x27;\n<\/code><\/pre><p>通过两个取反，可以强制转换为Boolean类型。较为常用。<\/p>\n<h2>Number<\/h2>\n<p>这个也特别简单，String转化为Number<\/p>\n<pre class=\"prettyprint\"><code>+&#x27;45&#x27;\n+new Date\n<\/code><\/pre><p>会自动转化为number类型的。较为常用。<\/p>\n<h2>IIFE<\/h2>\n<p>这个其实非常有实用价值，不算是装逼。只是其他语言里没有这么玩的，给不太了解js的同学看那可牛逼大了。<\/p>\n<pre class=\"prettyprint\"><code>(function(arg) {\n    &#x2F;&#x2F; do something\n})(arg)\n<\/code><\/pre><p>实用价值在于可以防止全局污染。不过现在随着ES2015的普及已经没什么必要用这个了，我相信五年之后，这种写法就会逐渐没落。<\/p>\n<p>自己干五年，在实习生面前装逼用也是蛮不错的嘛~<\/p>\n<h2>Closure<\/h2>\n<p>闭包嘛，js 特别好玩的一个地方。上面的立即执行函数就是对闭包的一种运用。<\/p>\n<p>不了解的回去翻翻书，知乎上也有很多讨论，可以去看看。<\/p>\n<p>闭包用起来对初学者来说简直就是大牛的标志(其实并不是)。<\/p>\n<pre class=\"prettyprint\"><code>var counter = function() {\n    var count = 0\n    return function() {\n        return count++\n    }\n}\n<\/code><\/pre><p>上面用到了闭包，看起来还挺装逼的吧。不过好像没什么实用价值。<\/p>\n<p>那么这样呢？<\/p>\n<pre class=\"prettyprint\"><code>var isType = function(type) {\n    return function(obj) {\n        return toString.call(obj) == &#x27;[Object &#x27; + type + &#x27;]&#x27;;\n    }\n}\n<\/code><\/pre><p>通过高阶函数很轻松的实现判定类别。(别忘了有判定Array的Array.isArray())<\/p>\n<p>当然，很明显，这只是基础，并不能更装逼一点。来看下一节<\/p>\n<h2>Event<\/h2>\n<p>事件响应前端肯定都写烂了，一般来说如何写一个计数器呢？<\/p>\n<pre class=\"prettyprint\"><code>var times = 0\nvar foo = document.querySelector(&#x27;.foo&#x27;)\nfoo.addEventListener(&#x27;click&#x27;, function() {\n    times++\n    console.log(times)\n}, false)\n<\/code><\/pre><p>好像是没什么问题哦，但是！变量<code>times<\/code>为什么放在外面，就用了一次放在外面，命名冲突了怎么办，或者万一在外面修改了怎么办。<\/p>\n<p>这个时候这样一个事件监听代码就比较牛逼了<\/p>\n<pre class=\"prettyprint\"><code>foo.addEventListener(&#x27;click&#x27;, (function() {\n    var times = 0\n    return function() {\n        times++\n        console.log(times)\n    }\n})(), false)\n<\/code><\/pre><p>怎么样，是不是立刻感觉不一样了。瞬间逼格高了起来！<\/p>\n<p>通过创建一个闭包，把<code>times<\/code>封装到里面，然后返回函数。这个用法不太常见。<\/p>\n<h2>parseInt<\/h2>\n<blockquote>\n<p>高能预警<\/p>\n<p>从这里开始，下面的代码谨慎写到公司代码里！<\/p>\n<\/blockquote>\n<p><code>parseInt<\/code>这个函数太普通了，怎么能装逼。答案是<code>~~<\/code><\/p>\n<p>现在摁下<code>F12<\/code>，在console里复制粘贴这样的代码：<\/p>\n<pre class=\"prettyprint\"><code>~~3.14159\n&#x2F;&#x2F; =&gt; 3\n~~5.678\n&#x2F;&#x2F; =&gt; 5\n<\/code><\/pre><p>这个技巧十分装逼，原理是<code>~<\/code>是一个叫做<strong>按位非<\/strong>的操作，会返回数值的反码。是二进制操作。<\/p>\n<p>原因在于JavaScript中的number都是double类型的，在位操作的时候要转化成int，两次~就还是原数。<\/p>\n<h2>Hex<\/h2>\n<p>十六进制操作。其实就是一个<code>Array.prototype.toString(16)<\/code>的用法<\/p>\n<p>看到这个词脑袋里冒出的肯定是CSS的颜色。<\/p>\n<p>做到随机的话可以这样<\/p>\n<pre class=\"prettyprint\"><code>(~~(Math.random()*(1&lt;&lt;24))).toString(16)\n<\/code><\/pre><p>底下的原文链接非常建议去读一下，后三个技巧都是在那里学到的。<\/p>\n<h2>&lt;&lt;<\/h2>\n<p>左移操作。这个操作特别叼。一般得玩 <em>C<\/em> 玩得多的，这个操作会懂一些。一般半路出家的前端码农可能不太了解(说的是我 ☹)。<\/p>\n<p>这个也是二进制操作。将数值二进制左移<\/p>\n<p>解释上面的<code>1&lt;&lt;24<\/code>的操作。<\/p>\n<p>其实是1左移24位。<code>000000000000000000000001<\/code>左移<em>24位<\/em>，变成了<code>1000000000000000000000000<\/code><\/p>\n<p>不信？<\/p>\n<p>试着在console粘贴下面的代码<\/p>\n<pre class=\"prettyprint\"><code>parseInt(&#x27;1000000000000000000000000&#x27;, 2) === (1 &lt;&lt; 24)\n<\/code><\/pre><p>其实还有一种更容易理解的方法来解释<\/p>\n<pre class=\"prettyprint\"><code>Math.pow(2,24) === (1 &lt;&lt; 24)\n<\/code><\/pre><p>因为是二进制操作，所以速度是很快的。<\/p>\n<h2>BTW<\/h2>\n<pre class=\"prettyprint\"><code>[].forEach.call($$(&quot;*&quot;),function(a){\n    a.style.outline=&quot;1px solid #&quot;+(~~(Math.random()*(1&lt;&lt;24))).toString(16)\n})\n<\/code><\/pre><p>翻译成正常语言就是这样的<\/p>\n<pre class=\"prettyprint\"><code>Array.prototype.forEach.call(document.querySelectorAll(&#x27;*&#x27;), dom =&gt; dom.style.outline = &#96;1px solid #${parseInt(Math.random() * Math.pow(2,24)).toString(16)}&#96;)\n<\/code><\/pre><h2>Others<\/h2>\n<p>其他的，像是一些<strong>await<\/strong>, <strong>Decorators<\/strong>什么的。用上<strong>TypeScript<\/strong>基本就懂的东西我就不介绍了。<\/p>\n<p>祝愿大家越玩越牛逼<\/p>\n<h2>References<\/h2>\n<ul>\n<li><a href=\"https://www.sdk.cn/news/3025\">从一行代码里面学点JavaScript<\/a><\/li>\n<li><a href=\"https://www.amazon.cn/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANode-js-%E6%9C%B4%E7%81%B5/dp/B00GOM5IL4/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1461059069&amp;sr=1-1&amp;keywords=%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA+node.js\">深入浅出Node.js<\/a><\/li>\n<li><a href=\"https://www.amazon.cn/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E6%B3%BD%E5%8D%A1%E6%96%AF/dp/B007OQQVMY/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1461058289&amp;sr=1-1&amp;keywords=javascript+%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\">JavaScript高级程序设计<\/a><\/li>\n<li><a href=\"https://www.amazon.cn/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5-%E6%9B%BE%E6%8E%A2/dp/B00XJ2AU3S/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1461059025&amp;sr=1-1&amp;keywords=javascript+%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5\">JavaScript设计模式与开发实践<\/a><\/li>\n<\/ul>\n<p><a href=\"https://annatarhe.github.io/2016/04/19/hack-js-code.html\">原文<\/a><\/p>\n<p>真心不懂linux xxx的公众号为啥要转这篇文章。。。。还是转给cnode的小伙伴看看吧，不推荐使用，只要知道好了，千万别写这样的代码<\/p>\n<\/div>","title":"基础 JavaScript 装逼指南(转)","last_reply_at":"2016-04-26T07:50:44.736Z","good":false,"top":false,"reply_count":17,"visit_count":685,"create_at":"2016-04-24T12:40:34.510Z","author":{"loginname":"i5ting","avatar_url":"https://avatars.githubusercontent.com/u/3118295?v=3&s=120"}},{"id":"5715ba13a5f1ee7352d13b27","author_id":"56d54fccbc28a31e7735e762","tab":"share","content":"<div class=\"markdown-text\"><h1>Vue-Filters-Kit<\/h1>\n<p>整合常用的Vue.js custom filters，帮助你快速格式化时间、小数等数据，适合开发Dashboard后台管理类应用。<\/p>\n<p><img src=\"//dn-cnode.qbox.me/FrzHXot-6MH6HDqXO3g7IXG4AQeU\" alt=\"screenshot.jpg\"><\/p>\n<p>GitHub: <a href=\"https://github.com/panteng/vue-filters-kit\">https://github.com/panteng/vue-filters-kit<\/a><\/p>\n<p>示例: <a href=\"http://panteng.me/demos/vue-filters-kit\">http://panteng.me/demos/vue-filters-kit<\/a><\/p>\n<h3>写在后面<\/h3>\n<p>这个项目的诞生的原因是，最近这一年我用Vue.js写了很多后台管理类的网站，这种网站会涉及很多数据格式化相关的工作。通常我会使用Vue过滤器实现数据格式化。因此我打算将一些常用的自定义过滤器整合起来，做成一个库，以后在写新项目时直接拿来用就好，不需要再从头编写。<\/p>\n<p>目前整合了我自己在Vue.js应用中常用的过滤器，包括booleanFormatter（格式化布尔值），byteFormatter（将Byte值转换为kb、mb、gb或tb）， percentageFormatter（将小数转化为百分数）和timestampFormatter（将时间戳转换为时间）。我将陆续增加更多的自定义过滤器。<\/p>\n<p>欢迎提bug和建议。如果你有其他常用的过滤器想补充，也欢迎pull request。<\/p>\n<\/div>","title":"【简化Vue.js应用开发】分享一个常用Vue.js自定义过滤器合集，适合开发Dashboard后台管理类应用","last_reply_at":"2016-04-26T07:42:22.182Z","good":false,"top":false,"reply_count":20,"visit_count":738,"create_at":"2016-04-19T04:54:43.385Z","author":{"loginname":"panteng","avatar_url":"https://avatars.githubusercontent.com/u/8369690?v=3&s=120"}},{"id":"56b058d871204e03637a378a","author_id":"5486c2effa1171ca10c11b27","tab":"share","content":"<div class=\"markdown-text\"><p>也是书到用时方恨少，这不最近业务需求，需要把制作的网页帮用户做成图片然后保存到相册。于是才开始寻找解决方案。现把自己的经验分享出来帮助大家避免一些坑。\n首先找到的解决方案有两个：\n一个是 客户端 截屏的工具html2canvas\n然后遇到了跨域的问题，我们的图片都是传到七牛的，跟服务器不在一个域，导致生成的图片残缺不全，ok，这个倒是好解决。\n我在express写了一个代理，加入特定的路径 \u2018local\u2019，把这部分资源用superagent代理过来，尝试过http-proxy，并没有成功，还是superagent好用，原理就是把请求路径中真正的地址用superagent请求，将响应体直接反馈到界面，这里请求的图片，因而返回的都是图片的buffer,直接用express的res.send()就好。\n这里简单贴下代码，下面会放demo的地址\napp.get(\u2019/local/*\u2019, function(req, res) {\nvar originurl = req.originalUrl;\noriginurl = originurl.substr(localname.length);\nsuperagent\n.get(originurl)\n.end(function(err, response) {\nif (err) {\n<a href=\"//console.log\">//console.log<\/a>(err);\n} else {\nres.send(response.body);\n}\n});\n})\n跨域的问题解决后发现截得图还是不能完美截图。尝试过背景图和直接放img,原本测试用例都可以，但是真实的例子布局比较复杂可能导致了一些问题，不知道这算不算html2canvas的小小缺陷，之后调整布局就可以得到完美的截图。<\/p>\n<pre class=\"prettyprint\"><code>   后续的dom操作就是把得到的base64数据放在界面上。这些都没有啥太大问题，但自己在扩展思路的时候又遇到了问题。比如业务需要把图片记录下来方便查询。ok，原本只需要把base64传入后台然后记录。这时候只需要一个小小的ajax发过去，就可以在用户不会感知的情况下记录这张照片。然而事实就是这个文件太大了，以至于根本传不过去，这里如果有知道ajax传入据上线的请告知下。总之就是过不去。\n so 问题又摆在面前了。\n 还好nodejs现在发展的对应各种问题都有解决方案。（这边突然想起d2大会，有人请讲师说明node和php不同的时候，讲师只是说了一个构建快速的优点，似乎没有说nodejs对应前端解决方案的方便性是php比不了的。毕竟核心v8=同浏览器）。ok言归正传。然后就直接用webshort了，不要问我怎么这个东西的，瞎翻瞎翻试试就是了。npm就是方便。例子也足够，然后一下子就成了。\n<\/code><\/pre><p>var options = {\nscreenSize: {\nwidth: 320,\nheight: 480\n},\nshotSize: {\nwidth: 320,\nheight: \u2018all\u2019\n},\nsiteType: \u2018html\u2019,\nuserAgent: \u2018Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_2 like Mac OS X; en-us)\u2019 + \u2019 AppleWebKit/531.21.20 (KHTML, like Gecko) Mobile/7B298g\u2019\n}\nres.render(\u2018index\u2019, {\ntitle: \u2018\u2019,\npicpath: picpath,\nlayout: layoutPath\n}, function(err, html) {\nwebshot(html, \u2018hhh.png\u2019,options, function(err) {\nres.send(html);\n});\n})\n这个会自动生成一张图片，自然也可以写成同步不影响真正的渲染。然后你可以把这张图用七牛api上传，把返回的地址保存下来，这个数据给运营看，前端界面完全可以继续使用html2canvas，或者嫌麻烦也可以用同一个，不过可能因为需要同步获取链接会导致用户体验上不太友好，无论如何截图功能就已经够完善了。看吧so easy，nodejs在前端看好你哦。\ndemo地址：\n<a href=\"https://github.com/wq123456/wstandh2c\">https://github.com/wq123456/wstandh2c<\/a>\n下面先看看展示结果：（\u2013为我们潮流的大yoho做个宣传）\n<img src=\"//dn-cnode.qbox.me/FgAeoozQAOF9fSqOAxIsV9ZzDyFC\" alt=\"Image.png\"><\/p>\n<p>顺便再加个小说明：\n你那边运行程序看到的结果或许是\n<img src=\"//dn-cnode.qbox.me/FmL9A9fjW7UKRV5XPX4sjknORzVx\" alt=\"Image2.png\">\n也就是webshot截图有问题，原因有两个\n一是我用cheerio 只拿到页面的html标签，没有带样式表，可以把样式表的引用放在 你要截取的元素内\n二是样式的引用不要放在同一个域比如这里是localhost/5678  要把它放在cdn上最好。<\/p>\n<p>ok enjoy yourself<\/p>\n<\/div>","title":"网页截屏服务端和客户端测试（webshot,html2canvas）","last_reply_at":"2016-04-26T07:36:51.031Z","good":false,"top":false,"reply_count":4,"visit_count":560,"create_at":"2016-02-02T07:20:56.535Z","author":{"loginname":"wq123456","avatar_url":"https://avatars.githubusercontent.com/u/4457084?v=3&s=120"}},{"id":"5719a1ba35af8a704195f297","author_id":"5413b2a48518442c62cd7ba3","tab":"job","content":"<div class=\"markdown-text\"><p>大家好~厘米脚印（北京）科技有限公司招聘！\n<a href=\"http://www.limijiaoyin.com\">www.limijiaoyin.com<\/a> 是我们公司的主页，有想了解的朋友请自行前往~<\/p>\n<p>以下是岗位需求：<\/p>\n<p>HTML5：<\/p>\n<ul>\n<li>丰富的 Web 前端开发经验，有充足的业余时间，能够按照时间计划完成项目；<\/li>\n<li>精通HTML、CSS、JavaScript等Web技术;<\/li>\n<li>熟悉各种JavaScript框架;<\/li>\n<li>有视觉设计、交互设计、界面设计等能力者优先;<\/li>\n<li>责任感强，有良好的代码编写习惯；具备较好的沟通技巧、沟通能力以及团队协作意识。<\/li>\n<\/ul>\n<p>Python：<\/p>\n<ul>\n<li>丰富的Python web开发经验，有充足的业余时间，能够按照时间计划完成项目；<\/li>\n<li>精通HTML、CSS、JavaScript等Web技术;<\/li>\n<li>熟悉各种JavaScript框架;<\/li>\n<li>责任感强，有良好的代码编写习惯；<\/li>\n<li>具备较好的沟通技巧、沟通能力以及团队协作意识。<\/li>\n<\/ul>\n<p>PHP：<\/p>\n<ul>\n<li>熟悉互联网行业，具备3-5年 PHP 程序开发经验，有充足的业余时间，能够按照时间计划完成项目；<\/li>\n<li>熟练掌握 HTML、JavaScript、CSS等 Web 前端技术；<\/li>\n<li>熟悉康盛、thinkphp等框架，具有 PHP 开发的实际项目经验；<\/li>\n<li>责任感强，有良好的代码编写习惯；<\/li>\n<li>具备较好的沟通技巧、沟通能力、团队协作意识。<\/li>\n<\/ul>\n<p>Java：<\/p>\n<ul>\n<li>丰富的 Java Web 开发经验，数据结构和算法基础扎实，了解常用设计模式，熟悉JAVA Web相关编程，有充足的业余时间，能够按照时间计划完成项目；<\/li>\n<li>负责服务器端、web端程序的设计及编写；<\/li>\n<li>参与项目需求分析，制定、调整、完善现有项目开发；<\/li>\n<li>熟悉 spring mvc, spring aop, spring data 等技术之一或全部；<\/li>\n<li>责任感强，有良好的代码编写习惯，具备较好的沟通技巧、沟通能力以及团队协作意识。<\/li>\n<\/ul>\n<p>iOS：<\/p>\n<ul>\n<li>丰富的iOS开发经验，有充足的业余时间，能够按照时间计划完成项目；<\/li>\n<li>熟悉 git 等基础工具，熟悉设计模式，熟悉 HTTP 等网络协议；<\/li>\n<li>具有丰富的 iOS 项目经验，有优化交互体验的经验；<\/li>\n<li>具有丰富的 iOS bug 修复和性能调优经验，有实际应用上线经验；<\/li>\n<li>具备较好的沟通技巧、沟通能力、团队协作意识。<\/li>\n<\/ul>\n<p>我们需要您：有2-5年工作经验，工作日的白天有时间响应我们的需求，跟产品方面做好沟通，避免联系不上人的现象；<\/p>\n<p>如果您或您的朋友有意向，可以联系qq2086334807，或者电话18510706032咨询；<\/p>\n<p>期待您的加入，期待与您的合作^ ^<\/p>\n<\/div>","title":"[招聘] 厘米脚印（北京）科技有限公司寻 HTML5、Python、PHP、Java、iOS 的自由职业者或兼职","last_reply_at":"2016-04-26T07:35:25.617Z","good":false,"top":false,"reply_count":2,"visit_count":250,"create_at":"2016-04-22T03:59:54.851Z","author":{"loginname":"limijiaoyin0516","avatar_url":"https://avatars.githubusercontent.com/u/8756479?v=3&s=120"}},{"id":"561f289b4928c5872abc18ee","author_id":"4efc278525fa69ac69000013","tab":"share","content":"<div class=\"markdown-text\"><p>alinode使用初始化步骤较为复杂，没有办法一行代码完成。本文分享下如何一步一步部署alinode。<\/p>\n<h2>申请试用资格<\/h2>\n<p>alinode的主页<a href=\"http://alinode.aliyun.com/\">http://alinode.aliyun.com/<\/a>提供公测试用申请，但用户数量是按天开放的，所以如果抢不到试用名额，凌晨时候申请一定能成功。目前alinode还没有收费，趁这个机会能够体验下alinode高级功能。<\/p>\n<h2>创建应用<\/h2>\n<p>申请到试用资格的用户可以在控制台<a href=\"http://alinode.aliyun.com/dashboard\">http://alinode.aliyun.com/dashboard<\/a>创建一个逻辑上的应用，每个用户可以创建多个应用。每个应用可以映射到多台服务器上，也就是说一个应用可以连接多个agentx。\n创建应用后，可以拿到应用的appid和secret。点击应用设置可以看到。如图：<\/p>\n<p><img src=\"//dn-cnode.qbox.me/FhxYO2cpFB5QfjY9YKs6W_9oIDEv\" alt=\"屏幕快照 2015-10-15 上午11.36.21.png\"><\/p>\n<p>appid和secret：\n<img src=\"//dn-cnode.qbox.me/FgnJDeCAeS6pnJSmX6v8MywPFldi\" alt=\"untitled1.png\">\n这两个信息都是极度机密，打死也不要告诉他人。<\/p>\n<h2>安装agentx<\/h2>\n<p>agentx是alinode用来做命令执行和数据监控的agent工具。与某些agent不同的是，agentx是<a href=\"https://github.com/aliyun-node/agentx\">完全开源<\/a>的,每个用户都能查看每行代码。另外agentx能执行的命令是有限的，这些命令也是<a href=\"https://github.com/aliyun-node/commands\">完全开源<\/a>的。<\/p>\n<p>安装命令：<\/p>\n<pre class=\"prettyprint language-sh\"><code>$ npm install agentx -g\n<\/code><\/pre><p>执行<code>agentx -v<\/code>可以查看版本号。\nagentx需要与alinode的服务相连，这里需要一些特定的配置。配置文件是一个json格式的文件，以下为示例：<\/p>\n<pre class=\"prettyprint\"><code>{\n  &quot;server&quot;: &quot;120.55.151.247:8080&quot;, &#x2F;&#x2F; alinode服务的地址，请不要修改\n  &quot;appid&quot;: &quot;您的应用ID&quot;, &#x2F;&#x2F; 上文创建的应用的app id\n  &quot;secret&quot;: &quot;您的应用Secret&quot;, &#x2F;&#x2F; 上文创建的应用的app secret\n  &quot;heartbeatInterval&quot;: 60, &#x2F;&#x2F; 不用修改\n  &quot;reconnectDelay&quot;: 10, &#x2F;&#x2F; 不用修改\n  &quot;reportInterval&quot;: 60, &#x2F;&#x2F; 不用修改\n  &quot;logdir&quot;: &quot;alinode生产的日志放置的路径，与NODE_LOG_DIR路径保持一致。如：&#x2F;tmp&#x2F;&quot;,  &#x2F;&#x2F; 如果不知道，就用 &#x2F;tmp\n  &quot;cmddir&quot;: &quot;命令集路径，绝对路径，如：&#x2F;Users&#x2F;jacksontian&#x2F;commands&quot;, &#x2F;&#x2F; 命令集路径\n  &quot;error_log&quot;: [\n    &quot;异常日志路径，如：&#x2F;root&#x2F;.logs&#x2F;error.#YYYY#-#MM#-#DD#.log&quot;\n  ] &#x2F;&#x2F; 可以配置一个异常日志的路径，其中#YYYY#、#MM#、#DD#是通配符，自动解释为当前时间的数据。如果不了解，将这里设置为空数组\n}\n<\/code><\/pre><p>将上述示例的注释清理掉后，确保语法没有错误，保存为config.json，或者以.json结尾的任意文件名。其中cmddir的路径可以设置为%HOME%/commands。<\/p>\n<h3>安装命令集<\/h3>\n<p>命令集位于：<a href=\"https://github.com/aliyun-node/commands%EF%BC%8C%E6%82%A8%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87clone%EF%BC%8C%E6%88%96%E8%80%85%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8E%8B%E7%BC%A9%E5%8C%85%E7%9A%84%E6%96%B9%E5%BC%8F%E5%B0%86%E5%91%BD%E4%BB%A4%E9%9B%86%E5%AE%89%E8%A3%85%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84cmddir%E8%B7%AF%E5%BE%84%E4%B8%8B%E5%8D%B3%E5%8F%AF%E3%80%82%E6%B3%A8%E6%84%8F%E8%AF%B7%E7%A1%AE%E4%BF%9Dcmddir%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%B0%B1%E6%98%AF%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E7%9B%AE%E5%BD%95%E3%80%82\">https://github.com/aliyun-node/commands，您可以通过clone，或者直接下载压缩包的方式将命令集安装到服务器上的cmddir路径下即可。注意请确保cmddir目录下就是脚本文件，而不是目录。<\/a><\/p>\n<h3>运行agentx<\/h3>\n<p>设置好配置和安装好命令集后，执行：<\/p>\n<pre class=\"prettyprint language-sh\"><code>$ nohup agentx &#x2F;path&#x2F;to&#x2F;your&#x2F;config.json &amp;\n<\/code><\/pre><p>注意nohup和最后的&amp;不能丢，表示长期运行这个命令。<\/p>\n<p>完成上述操作后，1分钟后即可在你的应用页面查看到一些数据。比如：<\/p>\n<p><img src=\"//dn-cnode.qbox.me/Fs7VqVNK8UZc4ADvjq6tdHRWsGqe\" alt=\"屏幕快照 2015-10-15 上午11.57.27.png\"><\/p>\n<p>绿色的小灯表示agentx正常连接中。<\/p>\n<p>当前正在执行的Node进程列表：<br>\n<img src=\"//dn-cnode.qbox.me/FmkzCX7ITmrbZpNFPuZpwkpNGiWJ\" alt=\"屏幕快照 2015-08-05 下午1.09.13.png\">\n一些系统级的数据：\n<img src=\"//dn-cnode.qbox.me/Fv3pkC40e61_mp0a_sPRbInN0zQq\" alt=\"屏幕快照 2015-09-30 下午4.28.41.png\"><\/p>\n<h2>安装alinode运行时<\/h2>\n<p>安装alinode运行时通过tnvm安装即可，速度是分钟级。<\/p>\n<h3>安装tnvm<\/h3>\n<pre class=\"prettyprint\"><code>wget -qO- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;aliyun-node&#x2F;tnvm&#x2F;master&#x2F;install.sh | bash\n<\/code><\/pre><p>完成安装后，您需要将tnvm添加为命令行程序。根据平台的不同，可能是~/.bashrc，~/.profile或~/.zshrc等，请根据提示进行手工操作。如：<\/p>\n<p>source ~/.bashrc<\/p>\n<p>完成上述操作后，tnvm就成为当前shell环境中的命令了。<\/p>\n<h3>选择alinode版本<\/h3>\n<p>执行<code>tnvm ls-remote alinode<\/code>查看所有的alinode版本。\n执行下面的命令安装一个版本：\n<code>tnvm install alinode-vx.x.x<\/code>\n执行下面的命令使用一个版本：\n<code>tnvm use alinode-vx.x.x<\/code><\/p>\n<p>alinode运行时是完全兼容社区node版本的运行时，无需修改任何代码才能使用。<\/p>\n<h2>运行alinode<\/h2>\n<p>通过tnvm安装alinode后，即可用alinode来启动你的应用。在设置以下环境变量会启用alinode的特别功能：<\/p>\n<pre class=\"prettyprint\"><code>export ENABLE_NODE_LOG=YES # 开启alinode的node log功能，使得agentx可以监控虚拟机级别的性能数据\nexport NODE_LOG_DIR=&#x2F;tmp&#x2F; # 指定生成的node log路径。可选。如果设置的话，请保持与agentx配置中的logdir值一致。\n<\/code><\/pre><p>然后就可以像平常运行node一样启动你的应用：<code>node xxx.js<\/code><\/p>\n<h2>总结<\/h2>\n<p>完成以上设置后，一分钟后就可以从alinode的dashboard看到更为细致的进程级别性能数据。如：\n<img src=\"//dn-cnode.qbox.me/FvMoph-KZRI19PmGH25ZML-Vtw_z\" alt=\"屏幕快照 2015-10-15 下午12.14.52.png\">\n<img src=\"//dn-cnode.qbox.me/FotVZKrElEQetbk0oqI4qYipIi23\" alt=\"屏幕快照 2015-10-15 下午12.15.31.png\"><\/p>\n<\/div>","title":"[step by step]部署alinode","last_reply_at":"2016-04-26T07:31:12.405Z","good":true,"top":false,"reply_count":56,"visit_count":3984,"create_at":"2015-10-15T04:16:27.333Z","author":{"loginname":"JacksonTian","avatar_url":"https://avatars.githubusercontent.com/u/327019?v=3&s=120"}},{"id":"570b640ebc564eaf3c6a4934","author_id":"556d3aae638127f01f74de76","tab":"job","content":"<div class=\"markdown-text\"><p>------岗位职责------\n1.参与整体架构的设计和讨论；\n2.负责Web系统&amp;APP相关的Api服务开发。\n岗位要求\n1.JavaScript基础扎实；\n3.熟悉HTTP协议和REST服务；\n4.熟悉异步I/0编程；\n5.熟悉Mysql/MongoDB/Redis；\n6.熟悉NodeJS框架，Express/Restify/Sails/KOA；\n7.熟练运用git\n最好能贴一个github地址哦！\n联系电话：17767068023  <a href=\"mailto:Mail:ball717@163.com\">Mail:ball717@163.com<\/a>\n-------产品介绍-------\n《学生定位与家校通产品》\n传统家校通产品只是单纯的家校业务通知，缺乏学生安全管理机制。而一些儿童定位产品又没有与学校业务建立联系。我们的产品将两者整合，做二次创新，线下渠道与关系非常稳定，目前已经拿下巨额订单。<\/p>\n<p>【【【产品已经上市】】】\n-------团队介绍---------\nweb前端（前网易1人带2人）、nodejs后端（前网易1人带1人）、产品经理（前网易1人）、硬件工程师（base深圳 20年经验）、嵌入式开发（base深圳5年+）、UI设计1人、IOS2人、Android3人,还需要nodejs若干\n其它行政、销售、生产等总计30人\n有意私聊！（也求各位同学帮忙推荐）<\/p>\n<\/div>","title":"杭州求nodejs工程师,1年以上，也可接收实习（学生手表+校讯通产品 已上线）","last_reply_at":"2016-04-26T06:51:54.241Z","good":false,"top":false,"reply_count":4,"visit_count":622,"create_at":"2016-04-11T08:45:02.247Z","author":{"loginname":"ball717","avatar_url":"https://avatars.githubusercontent.com/u/8175797?v=3&s=120"}},{"id":"571f0c2a5a26c4a841ecbd46","author_id":"514e61db73ddf77a602a5020","tab":"ask","content":"<div class=\"markdown-text\"><p>用bluebird将mongoose中所有的方法进行promise化，当一个model进行update后返回的query变成promise，无法通过exec获取到更新的数据<\/p>\n<pre class=\"prettyprint language-javascript\"><code>\tvar Promise = require(&#x27;bluebird&#x27;);\n\tvar PersonSchema = mongoose.Schema({\n\t\tname: &#x27;fsy&#x27;\n\t });\n\t var Person = mongoose.model(&#x27;person&#x27;, PersonSchema);\n\t Promise.promisifyAll(Person);\n\t Promise.promisifyAll(Person.prototype);\n\t &#x2F;&#x2F;假若db中有一个_id为123的document\n\t Person.update({_id: 123},{name: &#x27;aho&#x27;}).exec().then(function(result){\n          &#x2F;&#x2F;这里取到的result是更新数据统计\n\t })\n\t&#x2F;&#x2F;无法通过官网说的exec取到数据  [Model#update](http:&#x2F;&#x2F;mongoosejs.com&#x2F;docs&#x2F;api.html#model_Model.update)\n<\/code><\/pre><\/div>","title":"mongoose使用bluebird作为promise，update后无法通过exec获取更新后的数据","last_reply_at":"2016-04-26T06:35:22.215Z","good":false,"top":false,"reply_count":0,"visit_count":53,"create_at":"2016-04-26T06:35:22.215Z","author":{"loginname":"fsy0718","avatar_url":"//gravatar.com/avatar/7f92fde0329a9ec4912bb1ca0584d39e?size=48"}},{"id":"571f0735fa48138c41110e01","author_id":"56ca7fda9e3663b0619224b0","tab":"ask","content":"<div class=\"markdown-text\"><p>没有选择是最好，有选择，还是先问问前辈，免得自己走弯路。<\/p>\n<\/div>","title":"前端设计样式框架大家会推荐哪款？semantic和bootstrap或者其他？","last_reply_at":"2016-04-26T06:14:13.746Z","good":false,"top":false,"reply_count":0,"visit_count":82,"create_at":"2016-04-26T06:14:13.746Z","author":{"loginname":"tanshanli","avatar_url":"https://avatars.githubusercontent.com/u/12137100?v=3&s=120"}},{"id":"571e0bb63f27a7c841bcb5e0","author_id":"50f5a8dadf9e9fcc58635898","tab":"share","content":"<div class=\"markdown-text\"><p>根据 <a href=\"http://node.green\">http://node.green<\/a> 的统计结果：\n<img src=\"//dn-cnode.qbox.me/FkDGxK3arRfs1vzW_w-Vd4Vme2o8\" alt=\"Screen Shot 2016-04-25 at 8.19.34 AM.png\"><\/p>\n<\/div>","title":"NodeJS 6 已经支持 96％ 的 ES6 了","last_reply_at":"2016-04-26T05:53:28.885Z","good":false,"top":false,"reply_count":16,"visit_count":447,"create_at":"2016-04-25T12:21:10.739Z","author":{"loginname":"leapon","avatar_url":"https://avatars.githubusercontent.com/u/4295945?v=3&s=120"}},{"id":"571efe975a26c4a841ecbd37","author_id":"555c5884e684c4c8088a0cbc","tab":"ask","content":"<div class=\"markdown-text\"><p>使用的是tedious去连接mssql\nvar Connection = require(\u2018tedious\u2019).Connection;\nvar config = {\nuserName: \u201ctest\u201d, password: \u201ctest\u201d, server: \u201c<a href=\"http://114.xx.xx.xxx\">114.xx.xx.xxx<\/a>\u201d, database: \u201cxxxxx\u201d\n, instanceName: \u201cSQL_Instance\u201d\n};\nvar connection = new Connection(config);\nconnection.on(\u2018connect\u2019, function (err) {\nif (err) console.log(err);\n});<\/p>\n<p>服务器上的SQL不是默认实例，通过SSMS去连接是这样的： server_ip\\实例名<\/p>\n<p>Node去连接，输出的错误是：\n{ [ConnectionError: Failed to connect to <a href=\"http://114.xx.xx.xxx:1433\">114.xx.xx.xxx:1433<\/a> - connect ECONNREFUSED <a href=\"http://114.xx.xx.xxx:1433\">114.xx.xx.xxx:1433<\/a>]\nmessage: \u2018Failed to connect to <a href=\"http://114.xx.xx.xxx:1433\">114.xx.xx.xxx:1433<\/a> - connect ECONNREFUSED <a href=\"http://114.xx.xx.xxx:1433\">114.xx.xx.xxx:1433<\/a>\u2019,\ncode: \u2018ESOCKET\u2019 }<\/p>\n<p>求大侠帮忙看看问题<\/p>\n<\/div>","title":"Node连接MSSQL的问题，为什么连接不上。。。","last_reply_at":"2016-04-26T05:37:27.746Z","good":false,"top":false,"reply_count":0,"visit_count":59,"create_at":"2016-04-26T05:37:27.746Z","author":{"loginname":"loft218","avatar_url":"https://avatars.githubusercontent.com/u/12526939?v=3&s=120"}},{"id":"571cb9a43f27a7c841bcb565","author_id":"571cb6555a26c4a841ecbc81","tab":"job","content":"<div class=\"markdown-text\"><p>工作地点：杨浦-复旦科技园<\/p>\n<p>工作环境：紧靠四平科技公园，环境优美<\/p>\n<p>公司介绍：上海洋匠专注于建立中高净值用户和海外理财师交流咨询的平台，旨在解决用户信息少、理财难、成本高、亏损概率高的痛点，并以此为核心衍生包括知识普及、资产评估及配置、线下咨询及活动预约等服务体系。我们的目标是重构国内理财行业，将其由销售收费模式转向服务收费模式。<\/p>\n<p>亮点：\n效率十分高的创业公司，每一个人都有着他的位置，期权更不用说。\n现技术总监有超过10年编程经验，并希望能够带一些经验不多但学习能力强，且有志于计算机核心技术的新人，并让他们逐渐可以独当一面。\n公司虽然是创业公司，有着充裕的资金和深厚的资源，十分正规，五险一金更不用说。<\/p>\n<p>技能要求：熟练使用expressjs，mongodb，了解angular.js或react.js，对开源社区有贡献。<\/p>\n<p>工作内容：深入了解公司现用代码，在一段时间学习后能够承担技术总监的工作。公司会给予充分时间进行培训。<\/p>\n<p>工作待遇：10k-20k<\/p>\n<p>公司CTO的github账号: zyp001a<\/p>\n<p>联系方式：回帖或发送邮件到ypzhou@yangold.com<\/p>\n<\/div>","title":"【上海洋匠】招聘nodejs工程师","last_reply_at":"2016-04-26T05:25:20.937Z","good":false,"top":false,"reply_count":8,"visit_count":337,"create_at":"2016-04-24T12:18:44.884Z","author":{"loginname":"zyp001a","avatar_url":"https://avatars.githubusercontent.com/u/5070297?v=3&s=120"}},{"id":"571e037dfa48138c41110d9f","author_id":"538c599fc3ee0b5820134fee","tab":"share","content":"<div class=\"markdown-text\"><h3>Github<\/h3>\n<p><a href=\"https://github.com/welkinwong/nodercms\">https://github.com/welkinwong/nodercms<\/a><\/p>\n<p>基于 Noder.js + Mongodb，后台使用 AngularJS<\/p>\n<h3>演示<\/h3>\n<p><img src=\"//dn-cnode.qbox.me/FqTWLJhX1p8vW6yQCxQpYq59FRWo\" alt=\"管理后台.jpg\"><\/p>\n<ul>\n<li>地址：<a href=\"http://demo.nodercms.com\">http://demo.nodercms.com<\/a><\/li>\n<li>后台：<a href=\"http://demo.nodercms.com/admin\">http://demo.nodercms.com/admin<\/a><\/li>\n<li>账号：ghost@nodercms.com<\/li>\n<li>密码：123456<\/li>\n<\/ul>\n<\/div>","title":"新，NoderCMS - 轻量级内容管理系统","last_reply_at":"2016-04-26T05:07:09.872Z","good":false,"top":false,"reply_count":6,"visit_count":218,"create_at":"2016-04-25T11:46:05.172Z","author":{"loginname":"WelkinWong","avatar_url":"https://avatars.githubusercontent.com/u/6650440?v=3&s=120"}},{"id":"571238a3434cfcfa52684ab9","author_id":"56fbb0c093a6967159553a2d","tab":"share","content":"<div class=\"markdown-text\"><p>搞了差不多10天，做了这个项目MEAN-BLOG，兄弟们来看看。\n###在线实例：\n<a href=\"http://114.215.164.12:3000\">Click这里<\/a>\n###Github:\n<a href=\"https://github.com/icyse/mean-blog\">Click这里<\/a>    <a href=\"https://github.com/icyse/mean-blog\">https://github.com/icyse/mean-blog<\/a>  ，star多多砸来\n###截两张图吧<\/p>\n<p><img src=\"//dn-cnode.qbox.me/FvfxDRFyxRzAjDmaJTI192TpSXjY\" alt=\"2016-04-16_205522.jpg\"><img src=\"//dn-cnode.qbox.me/Fhp6Z5G76JMqdUdzKkWz-1zyce67\" alt=\"2016-04-16_205507.jpg\"><img src=\"//dn-cnode.qbox.me/FpNGSH1AKtX7wWMQ8KR3SPiKHW3Z\" alt=\"2016-04-16_205813.jpg\">\n###声明\n首先感谢项目https://github.com/eshengsky/iBlog2及其作者，对我的开发有所启发，谢谢。<\/p>\n<\/div>","title":"一个JS全栈构建的博客应用，MongoDb+Express+AngularJs+NodeJs+Redis","last_reply_at":"2016-04-26T05:03:59.575Z","good":false,"top":false,"reply_count":31,"visit_count":2653,"create_at":"2016-04-16T13:05:39.021Z","author":{"loginname":"icyse","avatar_url":"https://avatars.githubusercontent.com/u/7568624?v=3&s=120"}},{"id":"571704a33eaac6ed54e7bf51","author_id":"53f8a710bbdaa79d51633ca0","tab":"share","content":"<div class=\"markdown-text\"><p>（1）快速上手 <a href=\"http://mp.weixin.qq.com/s?__biz=MzIyMzAwNzExNg==&amp;mid=2650853629&amp;idx=1&amp;sn=c8b7123507bb6def9cc058ac281053d7#rd\">http://mp.weixin.qq.com/s?__biz=MzIyMzAwNzExNg==&amp;mid=2650853629&amp;idx=1&amp;sn=c8b7123507bb6def9cc058ac281053d7#rd<\/a> <a href=\"http://mp.weixin.qq.com/s?__biz=MzIyMzAwNzExNg==&amp;mid=2650853629&amp;idx=1&amp;sn=c8b7123507bb6def9cc058ac281053d7#rd\"><\/a>\n（2）模板语法 <a href=\"http://mp.weixin.qq.com/s?__biz=MzIyMzAwNzExNg==&amp;mid=2650853632&amp;idx=1&amp;sn=8390288ee1f20720c882f0a7b19a13f8#rd\">http://mp.weixin.qq.com/s?__biz=MzIyMzAwNzExNg==&amp;mid=2650853632&amp;idx=1&amp;sn=8390288ee1f20720c882f0a7b19a13f8#rd<\/a> <a href=\"http://mp.weixin.qq.com/s?__biz=MzIyMzAwNzExNg==&amp;mid=2650853632&amp;idx=1&amp;sn=8390288ee1f20720c882f0a7b19a13f8#rd\"><\/a>\n（3）<\/p>\n<\/div>","title":"Angular2入门\b系列文章","last_reply_at":"2016-04-26T04:36:11.678Z","good":false,"top":false,"reply_count":2,"visit_count":290,"create_at":"2016-04-20T04:25:07.434Z","author":{"loginname":"JerroldLee","avatar_url":"https://avatars.githubusercontent.com/u/5645510?v=3&s=120"}},{"id":"571e47975a26c4a841ecbd09","author_id":"56f36234fa2ee8df3a650536","tab":"ask","content":"<div class=\"markdown-text\"><p>后台基于nodejs的,最好比较完整的那种。<\/p>\n<\/div>","title":"有开源的商城系统吗？","last_reply_at":"2016-04-26T04:23:48.961Z","good":false,"top":false,"reply_count":3,"visit_count":195,"create_at":"2016-04-25T16:36:39.805Z","author":{"loginname":"mlyknown","avatar_url":"https://avatars.githubusercontent.com/u/12880984?v=3&s=120"}},{"id":"55629a8a8f294e213d10b8e7","author_id":"5562940f8f294e213d10b8cf","tab":"ask","content":"<div class=\"markdown-text\"><p>报错如下：\n{ [Error: connect ECONNREFUSED]\ncode: \u2018ECONNREFUSED\u2019,\nerrno: \u2018ECONNREFUSED\u2019,\nsyscall: \u2018connect\u2019 }\n之前有伙伴发过这个问题（<a href=\"https://cnodejs.org/topic/543c756f91eadb0f73aa33f4#556294908f294e213d10b8d1%EF%BC%89%EF%BC%8C%E4%BD%86%E6%98%AF%E6%B2%A1%E6%9C%89%E7%BB%99%E5%87%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%82%E3%80%82%E3%80%82%E3%80%82%E7%8E%B0%E5%9C%A8%E6%88%91%E4%B9%9F%E9%81%87%E5%88%B0%E4%BA%86%E8%BF%99%E4%B8%AA%E9%97%AE%E9%A2%98%EF%BC%8C%E5%B8%8C%E6%9C%9B%E5%A4%A7%E7%89%9B%E4%BB%AC%E5%B8%AE%E5%BF%99~~~%E5%A5%BD%E7%BB%99%E5%A4%A7%E5%AE%B6%E5%BC%84%E4%B8%AA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%87%BA%E6%9D%A5%E3%80%82\">https://cnodejs.org/topic/543c756f91eadb0f73aa33f4#556294908f294e213d10b8d1），但是没有给出解决方案。。。。现在我也遇到了这个问题，希望大牛们帮忙~~~好给大家弄个解决方案出来。<\/a>\n1、这个问题无论是在什么网络环境下都会出现，并非是之前话题小伙伴评论说是网络环境问题，目前我测试过的连接互联网环境有：校园客户端、家庭宽带、云服务器、公网固定IP这四种情况下，报的错误是一样（如上贴出来的代码），所以断定不是因为网络环境。\n2、还有伙伴说是因为SMTP协议等，这个我也测试过了，163和QQ和gmail的邮箱都试过（当然用的是对应的协议，并且测试的邮箱都打开了该协议），即使和github上给出的例子一模一样只改发件人邮箱，还是报错。所以断定不是因为协议的问题。<\/p>\n<\/div>","title":"nodemailer发送邮件出错（已解决）","last_reply_at":"2016-04-26T03:46:44.369Z","good":false,"top":false,"reply_count":25,"visit_count":3003,"create_at":"2015-05-25T03:44:10.075Z","author":{"loginname":"chenfeifan","avatar_url":"https://avatars.githubusercontent.com/u/12539384?v=3&s=120"}},{"id":"571e3c155a26c4a841ecbd06","author_id":"50b5bc5d637ffa4155091236","tab":"ask","content":"<div class=\"markdown-text\"><p>参照https://github.com/faye/faye-websocket-node 上面的例子\nserver.js<\/p>\n<pre class=\"prettyprint\"><code>var WebSocket = require(&#x27;faye-websocket&#x27;),\nfs=require(&#x27;fs&#x27;),\n    http      = require(&#x27;http&#x27;);\n\nvar server = http.createServer();\n\nserver.on(&#x27;request&#x27;,function(req,res){\n\n\n  console.log(&#x27;request&#x27;);\n\n   res.writeHeader(200, {&quot;Content-Type&quot;: &quot;text&#x2F;html&quot;});  \n   var filename=__dirname+&#x27;&#x2F;conn.html&#x27;;\n  fs.readFile(filename,&#x27;utf8&#x27;,function (err,data)  {\n&#x2F;&#x2F;console.log(err); \n\n  res.end(data);\n  })  \n\n});\n\n\nserver.on(&#x27;upgrade&#x27;, function(request, socket, body) {\n  if (WebSocket.isWebSocket(request)) {\n    var ws = new WebSocket(request, socket, body);\n\n    ws.on(&#x27;message&#x27;, function(event) {\n      ws.send(event.data);\n    });\n\n    ws.on(&#x27;close&#x27;, function(event) {\n      console.log(&#x27;close&#x27;, event.code, event.reason);\n      ws = null;\n    });\n  }\n});\n\nserver.listen(8000);\n<\/code><\/pre><p>conn.html<\/p>\n<pre class=\"prettyprint\"><code>&lt;script type=&quot;text&#x2F;javascript&quot;&gt;\n\nvar wsServer = &#x27;ws:&#x2F;&#x2F;localhost:8080&#x27;;\n\t\t\tvar ws = new WebSocket(wsServer);\n\t\t\t\n\t\t\tws.onopen = function (e) {\n\t\t\talert(&quot;Connected to WebSocket server.&quot;);\n            }\n\n&lt;&#x2F;script&gt;\n<\/code><\/pre><\/div>","title":"为什么 server.on('upgrade'执行不到?","last_reply_at":"2016-04-26T03:01:25.691Z","good":false,"top":false,"reply_count":2,"visit_count":88,"create_at":"2016-04-25T15:47:33.566Z","author":{"loginname":"yakczh","avatar_url":"https://avatars.githubusercontent.com/u/6591466?v=3&s=120"}},{"id":"571ec3fe3f27a7c841bcb60c","author_id":"561222a21e7b855577ff54a6","tab":"ask","content":"<div class=\"markdown-text\"><p>请问，有人知道国产的框架有哪些吗？<\/p>\n<\/div>","title":"国产的 Nodejs 框架有哪些？","last_reply_at":"2016-04-26T02:48:17.039Z","good":false,"top":false,"reply_count":2,"visit_count":202,"create_at":"2016-04-26T01:27:26.773Z","author":{"loginname":"dotku","avatar_url":"https://avatars.githubusercontent.com/u/1519232?v=3&s=120"}},{"id":"571ba1b35a26c4a841ecbc57","author_id":"506a5cb401d0b801489e94c0","tab":"ask","content":"<div class=\"markdown-text\"><p>http前后端交互类型采用Content-Type：application/octet-stream，有什么好处和坏处？<\/p>\n<pre class=\"prettyprint\"><code>headers: {\n     &#x27;Content-Type&#x27;:&#x27;application&#x2F;octet-stream&#x27;\n     }\n<\/code><\/pre><\/div>","title":"http前后端交互类型采用Content-Type：application/octet-stream，有什么作用？","last_reply_at":"2016-04-26T02:39:50.898Z","good":false,"top":false,"reply_count":9,"visit_count":240,"create_at":"2016-04-23T16:24:19.712Z","author":{"loginname":"j60017268","avatar_url":"//gravatar.com/avatar/e3452f82d9b172c32e29559d5472d3d0?size=48"}},{"id":"521f6908bee8d3cb120fc5b5","author_id":"51c80d2c73c638f370b6fcb5","content":"<div class=\"markdown-text\"><p>我用的是express框架，仅仅在package.json 里面 加上 \u201cgm\u201d: \u201c*\u201d 安装npm install\n好像没有用。<\/p>\n<p>使用时还需要安装GraphicsMagick 或者 ImageMagick<\/p>\n<p>求助GraphicsMagick 或者 ImageMagick 具体如何安装<\/p>\n<p>是在package.json 里面 加上&quot;imagemagick&quot;:&quot;*&quot; 吗，我这安装好像不行<\/p>\n<p>求助大神~~~<\/p>\n<\/div>","title":"求助如node处理图片的gm如何安装 GraphicsMagick 或者 ImageMagick","last_reply_at":"2016-04-26T02:34:01.231Z","good":false,"top":false,"reply_count":8,"visit_count":3571,"create_at":"2013-08-29T15:30:16.774Z","author":{"loginname":"guang152252326","avatar_url":"//gravatar.com/avatar/e7913c68ffb5a35c0eaea4bb99aae861?size=48"}},{"id":"56fb7efd8265278d59c7e2fd","author_id":"56d7ed43502596633dc2c2cf","tab":"job","content":"<div class=\"markdown-text\"><p>公司名称：好胎屋 ----  汽车后服务行业，整合线下的汽车修理服务店打造10分钟汽车生态圈<\/p>\n<p>要求：3-5年web经验，有JAVA，PHP，Python等任何一门语言后台经验即可\n加分项：创业公司合伙人，有node.js研发经验最佳（没有经验愿意学习也可以）\n卖点：\n1）核心团队为网易，YY背景技术大牛，追求技术极致，所以要求极高\n2）在O2O寒冬，利用丰富的线下资源拿到了A轮一个亿\n3）办公地点高大上，落地窗，俯瞰风景好（办公地点广州江南西CBD）\n4）只要你技术够好，薪资50%涨幅起（15-40K）<\/p>\n<p>邮箱  <a href=\"mailto:bill.huang@trump-hr.com\">bill.huang@trump-hr.com<\/a>  <a href=\"mailto:306790935@qq.com\">306790935@qq.com<\/a><\/p>\n<\/div>","title":"【广州】新开贴 15K-40K 带期权 需要两枚Node.js 核心技术团队BAT，华为，猎豹背景","last_reply_at":"2016-04-26T02:31:50.134Z","good":false,"top":false,"reply_count":15,"visit_count":1460,"create_at":"2016-03-30T07:23:41.884Z","author":{"loginname":"yellowbaby","avatar_url":"https://avatars.githubusercontent.com/u/17611059?v=3&s=120"}},{"id":"54081ecb0256839f71dbd340","author_id":"5191d23f63e9f8a542bc15b5","content":"<div class=\"markdown-text\"><p><img src=\"http://blog.fens.me/wp-content/uploads/2014/09/nodejs-nodemailer.png\" alt=\"Nodejs发邮件组件Nodemailer\"><\/p>\n<h3>前言：<\/h3>\n<p>电子邮件，是互联网应用最广泛使用的服务之一，通过电子邮件系统，我们可以与世界上任何一个角落的网络用户进行联系。<\/p>\n<p>使用Nodejs收发电子邮件也非常简单，Nodemailer包就可以帮助快速实现发邮件的功能。<\/p>\n<h3>文章目录：<\/h3>\n<ol>\n<li>Nodemailer包介绍<\/li>\n<li>使用Nodemailer发邮件<\/li>\n<li>发邮件的高级使用<\/li>\n<\/ol>\n<h3>请查看<a href=\"http://blog.fens.me/nodejs-email-nodemailer/\">博客文章<\/a><\/h3>\n<p><a href=\"http://blog.fens.me/nodejs-email-nodemailer/\">http://blog.fens.me/nodejs-email-nodemailer/<\/a><\/p>\n<\/div>","title":"Nodejs发邮件组件Nodemailer","last_reply_at":"2016-04-26T02:21:00.371Z","good":false,"top":false,"reply_count":15,"visit_count":6927,"create_at":"2014-09-04T08:11:55.257Z","author":{"loginname":"bsspirit","avatar_url":"https://avatars.githubusercontent.com/u/170283?v=3&s=120"}},{"id":"56f122ba0a5a2cfb3ad1491c","author_id":"56dd73d7f5d830306e2f0e89","tab":"share","content":"<div class=\"markdown-text\"><p>基于 Node.js 的个人开源博客系统，采用响应式布局，支持移动设备直接访问，功能全面，美观大方。\n<em>不仅仅是博客，更是 Demo<\/em>，适合新人入门学习的完整项目。<\/p>\n<ul>\n<li>在线实例<br>\n<a href=\"http://www.skysun.name\">http://www.skysun.name<\/a><\/li>\n<li>Github源码<br>\n<a href=\"https://github.com/eshengsky/iBlog2\">https://github.com/eshengsky/iBlog2<\/a><\/li>\n<li>Wiki<br>\n<a href=\"https://github.com/eshengsky/iBlog2/wiki\">https://github.com/eshengsky/iBlog2/wiki<\/a><br>\nWiki 整理了 iBlog2 中涉及 Node.js 及部分前端技术的基本功能与知识点，适合新手学习、备查。<\/li>\n<\/ul>\n<p>我也是刚学 Node.js 的新手，欢迎大家一起学习交流，共同提高~<\/p>\n<\/div>","title":"iBlog2：基于 Node.js 的个人开源博客系统","last_reply_at":"2016-04-26T02:01:13.920Z","good":false,"top":false,"reply_count":58,"visit_count":2022,"create_at":"2016-03-22T10:47:22.810Z","author":{"loginname":"eshengsky","avatar_url":"https://avatars.githubusercontent.com/u/9640122?v=3&s=120"}},{"id":"571c285035af8a704195f32e","author_id":"571c27bbfa48138c41110d26","tab":"ask","content":"<div class=\"markdown-text\"><p>在学习node.js过程中发现操作mongodb有的用mongoose有的直接用mongodb，这两者有什么区别？或者说之间有什么关系？\n谢谢。<\/p>\n<\/div>","title":"mongoose 、mongodb之前是什么关系？","last_reply_at":"2016-04-26T01:56:21.216Z","good":false,"top":false,"reply_count":3,"visit_count":210,"create_at":"2016-04-24T01:58:40.141Z","author":{"loginname":"wjfnet","avatar_url":"https://avatars.githubusercontent.com/u/3350384?v=3&s=120"}},{"id":"571de91135af8a704195f39a","author_id":"56a730f7073124894b190b27","tab":"ask","content":"<div class=\"markdown-text\"><p>在co里面 使用\nwhile（true）｛\n\tlet result = yield redis.brpop(name) ;\n\thandle(result);\n｝\nwhile里面调用redis 队列的阻塞接口， 等待结果返回 然后对接口进行处理 handle里面可能还会用到yield<\/p>\n<p>形如：\nco(function*(){\n\twhile(true){\n\t\tlet result = yield redis.brpop(name) ;\n\t\thandle(result);\n\t}\n})\n这样会有什么问题么？ 求大侠指导！！！！\n常见的一般都是 co的function里面都是有限个 yield ， 遇到这种 不定的yield 会不会有问题<\/p>\n<\/div>","title":"co 中使用while 不停的yield   redis.brpop(name)","last_reply_at":"2016-04-26T01:45:54.846Z","good":false,"top":false,"reply_count":3,"visit_count":117,"create_at":"2016-04-25T09:53:21.662Z","author":{"loginname":"jizhuofeng","avatar_url":"https://avatars.githubusercontent.com/u/3127016?v=3&s=120"}}]
     */

    private boolean success;
    /**
     * id : 570907402a1f230a25be8aab
     * author_id : 504c28a2e2b845157708cb61
     * tab : share
     * content : <div class="markdown-text"><p>首先还是感谢腾讯云提供的高大上多功能厅</p>
     * <p><a href="http://www.qcloud.com/"><img src="https://dn-cnode.qbox.me/FsvQEUQ9vjOy_6NohcGGt3GfTC8v" alt></a></p>
     * <p>今天现场来了蛮多人的，场地都差不多坐满了。估算了一下，应该有120人这样吧。</p>
     * <p>现场有妹子。。。不知道是怎么乱入的。。。</p>
     * <h2>现场图：</h2>
     * <p><img src="//dn-cnode.qbox.me/FpuW7efPArrOentVnHorEtJYcK78" alt="1.pic.jpg">
     * <img src="//dn-cnode.qbox.me/Fpv-sdGbUzLeaRhfU5P06kxzDW6B" alt="2.pic.jpg">
     * <img src="//dn-cnode.qbox.me/FsVJpwBTqkYXay25g7xAcceldMK6" alt="3.pic.jpg">
     * <img src="//dn-cnode.qbox.me/FrkAKC11Gk5Zd0_Rgg9xrMkWFKJo" alt="4.pic.jpg">
     * <img src="//dn-cnode.qbox.me/FqyIFHWfdBYCxD27yQUe3jjY5n4y" alt="5.pic.jpg">
     * <img src="//dn-cnode.qbox.me/FhtEgFhLGS7kRueqNKsZq4L7Vecw" alt="6.pic.jpg">
     * <img src="//dn-cnode.qbox.me/FotdGLBLB4O1GQ0mQ5SA5yG9I3ID" alt="7.pic.jpg">
     * <img src="//dn-cnode.qbox.me/FvIjqdflJ3QLKoDUzZJzdEA0MKKu" alt="9.pic.jpg">
     * <img src="//dn-cnode.qbox.me/Foqtg6-iUxFF7GzL2sdEYLSxXLvQ" alt="8.pic.jpg"></p>
     * <h2>PPT：</h2>
     * <p>3份文件形式的：《实战ES2015 - 腾讯NodeParty》 《Nodejs平台化实践-NodeParty》 《TypeScript 在 Node 中的应用》 <a href="http://pan.baidu.com/s/1dEREt3N">http://pan.baidu.com/s/1dEREt3N</a>
     * 一个 web 形式的：《Node.js 在广发证券》 <a href="http://gaohailang.github.io/node-party-gf-security-practice/#/">http://gaohailang.github.io/node-party-gf-security-practice/#/</a></p>
     * </div>
     * title : 【深圳】NodeParty 2016.04.09 总结
     * last_reply_at : 2016-04-26T02:11:46.078Z
     * good : false
     * top : true
     * reply_count : 40
     * visit_count : 4218
     * create_at : 2016-04-09T13:44:32.276Z
     * author : {"loginname":"alsotang","avatar_url":"https://avatars.githubusercontent.com/u/1147375?v=3&s=120"}
     */

    private List<DataBean> data;

    public boolean isSuccess() {
        return success;
    }

    public void setSuccess(boolean success) {
        this.success = success;
    }

    public List<DataBean> getData() {
        return data;
    }

    public void setData(List<DataBean> data) {
        this.data = data;
    }

    public static class DataBean {
        private String id;
        private String author_id;
        private String tab;
        private String content;
        private String title;
        private String last_reply_at;
        private boolean good;
        private boolean top;
        private int reply_count;
        private int visit_count;
        private String create_at;
        /**
         * loginname : alsotang
         * avatar_url : https://avatars.githubusercontent.com/u/1147375?v=3&s=120
         */

        private AuthorBean author;

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public String getAuthor_id() {
            return author_id;
        }

        public void setAuthor_id(String author_id) {
            this.author_id = author_id;
        }

        public String getTab() {
            return tab;
        }

        public void setTab(String tab) {
            this.tab = tab;
        }

        public String getContent() {
            return content;
        }

        public void setContent(String content) {
            this.content = content;
        }

        public String getTitle() {
            return title;
        }

        public void setTitle(String title) {
            this.title = title;
        }

        public String getLast_reply_at() {
            return last_reply_at;
        }

        public void setLast_reply_at(String last_reply_at) {
            this.last_reply_at = last_reply_at;
        }

        public boolean isGood() {
            return good;
        }

        public void setGood(boolean good) {
            this.good = good;
        }

        public boolean isTop() {
            return top;
        }

        public void setTop(boolean top) {
            this.top = top;
        }

        public int getReply_count() {
            return reply_count;
        }

        public void setReply_count(int reply_count) {
            this.reply_count = reply_count;
        }

        public int getVisit_count() {
            return visit_count;
        }

        public void setVisit_count(int visit_count) {
            this.visit_count = visit_count;
        }

        public String getCreate_at() {
            return create_at;
        }

        public void setCreate_at(String create_at) {
            this.create_at = create_at;
        }

        public AuthorBean getAuthor() {
            return author;
        }

        public void setAuthor(AuthorBean author) {
            this.author = author;
        }

        public static class AuthorBean {
            private String loginname;
            private String avatar_url;

            public String getLoginname() {
                return loginname;
            }

            public void setLoginname(String loginname) {
                this.loginname = loginname;
            }

            public String getAvatar_url() {
                return avatar_url;
            }

            public void setAvatar_url(String avatar_url) {
                this.avatar_url = avatar_url;
            }
        }
    }
}